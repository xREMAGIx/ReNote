"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[6471],{3841:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var t=s(5893),r=s(1151);const a={sidebar_position:2},l="Generators",i={id:"hygen/generators",title:"Generators",description:"Overview",source:"@site/docs/hygen/generators.md",sourceDirName:"hygen",slug:"/hygen/generators",permalink:"/renote/docs/hygen/generators",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/hygen/generators.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Templates",permalink:"/renote/docs/hygen/templates"},next:{title:"Libraries - Packages",permalink:"/renote/docs/category/libraries---packages"}},o={},c=[{value:"Overview",id:"overview",level:2},{value:"Structure",id:"structure",level:2},{value:"CLI Arguments",id:"cli-arguments",level:2},{value:"Interactive prompt",id:"interactive-prompt",level:2},{value:"Advanced Interactive prompt",id:"advanced-interactive-prompt",level:2},{value:"Basic",id:"basic",level:3},{value:"Skipping prompt",id:"skipping-prompt",level:3},{value:"Argument utils module",id:"argument-utils-module",level:3},{value:"Document your prompt",id:"document-your-prompt",level:2},{value:"Selecting parts of a Generator",id:"selecting-parts-of-a-generator",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"generators",children:"Generators"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Create new generator:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen generator new --name mailer\n                              `-------- just a name you pick.\n"})}),"\n",(0,t.jsx)(n.p,{children:"It will create a corresponing template for us:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"Loaded templates: _templates\n       added: _templates/mailer/new/hello.ejs.t\n                                       `------ your template file.\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If we don't specify a generator, it's will throw error and available generator list. As you can see below, ",(0,t.jsx)(n.code,{children:"mailer"})," has been added."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen\n\nError: please specify a generator.\n\nAvailable actions:\ngenerator: new, with-prompt\nmailer: new\n    \\\n     `----------- your new generator is already here!\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When a generator under ",(0,t.jsx)(n.code,{children:"\\templates"}),", it's ready to use."]}),"\n",(0,t.jsx)(n.p,{children:"Here's hello.ejs.t that was placed in the template folder for you:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",metastring:'title="_templates/mailer/new/hello.ejs.t"',children:"---\nto: app/hello.js\n---\nconst hello = `\nHello!\nThis is your first hygen template.\n\nLearn what it can do here:\n\nhttps://github.com/jondot/hygen\n`\n\nconsole.log(hello)\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"hygen"})," doesn't care about file names or file types in your generator folders. It only cares about folder structure and the contents of your files."]})}),"\n",(0,t.jsx)(n.h2,{id:"structure",children:"Structure"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markup",children:".\n\u251c\u2500\u2500 _templates/\n\u2502   \u2514\u2500\u2500 mailer/\n\u2502       \u2514\u2500\u2500 new/\n\u2502           \u251c\u2500\u2500 html.ejs.t\n\u2502           \u2514\u2500\u2500 text.ejs.t\n\u251c\u2500\u2500 app/\n\u2502   \u2514\u2500\u2500 index.js\n\u2514\u2500\u2500 package.json\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Every time you call it, ",(0,t.jsx)(n.code,{children:"hygen mailer new"})," automagically picks up the closest ",(0,t.jsx)(n.code,{children:"_templates"})," folder, and renders all files in ",(0,t.jsx)(n.code,{children:"mailer/new"}),". In this case it's ",(0,t.jsx)(n.code,{children:"html.ejs.t"})," and ",(0,t.jsx)(n.code,{children:"text.ejs.t"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"cli-arguments",children:"CLI Arguments"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen mailer new --name foobar --message hello --version 1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Any double-dash (",(0,t.jsx)(n.code,{children:"--"}),") argument becomes a variable we can use later in our templates."]}),"\n",(0,t.jsxs)(n.p,{children:["Here's the contents of the template ",(0,t.jsx)(n.code,{children:"html.ejs.t"})," with the variables in place:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"---\nto: app/emails/<%= name %>.html\n---\n<h1>Hello <%= name %></h1>\n<%= message %>\n(version <%= version %>)\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interactive-prompt",children:"Interactive prompt"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markup",children:".\n\u2514\u2500\u2500 _templates/\n    \u2514\u2500\u2500 mailer/\n        \u2514\u2500\u2500 new/           <-- the mailer new generator/\n            \u251c\u2500\u2500 prompt.js    <-- your prompt file!\n            \u251c\u2500\u2500 html.ejs.t\n            \u2514\u2500\u2500 text.ejs.t\n"})}),"\n",(0,t.jsxs)(n.p,{children:["For example, to ask for the ",(0,t.jsx)(n.code,{children:"message"})," input variable, add to ",(0,t.jsx)(n.code,{children:"prompt.js"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/mailer/new/prompt.js"',children:'module.exports = [\n  {\n    type: "input",\n    name: "message",\n    message: "What\'s your message?",\n  },\n];\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["The format is based on ",(0,t.jsx)(n.a,{href:"https://github.com/enquirer/enquirer#prompt-options",children:"enquirer"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:"We can render variables like below:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",metastring:'title="_templates/mailer/new/text.ejs.t"',children:"---\nto: app/emails/<%= name %>.txt\n---\n<%= message %>\n"})}),"\n",(0,t.jsx)(n.p,{children:"To generate it, we'll do this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen mailer new --name fancy-mailer\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-interactive-prompt",children:"Advanced Interactive prompt"}),"\n",(0,t.jsx)(n.p,{children:"Structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markup",children:".\n\u2514\u2500\u2500 my-generator/\n    \u2514\u2500\u2500 my-action/\n        \u251c\u2500\u2500 index.js\n        \u251c\u2500\u2500 template1.ejs.t\n        \u2514\u2500\u2500 template2.ejs.t\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"my-generator"}),", ",(0,t.jsx)(n.em,{children:"my-action"}),",",(0,t.jsx)(n.em,{children:"template1"})," , ",(0,t.jsx)(n.em,{children:"template2"})," are dynamic name. You can put any name you want."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"BUT"})," ",(0,t.jsx)(n.code,{children:"index.js"})," is a special case, hygen will see it as ",(0,t.jsx)(n.code,{children:"prompt.js"})," to generate templates. So you ",(0,t.jsx)(n.strong,{children:"MUST NOT"})," name other files as ",(0,t.jsx)(n.code,{children:"index.js"})]})]}),"\n",(0,t.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,t.jsxs)(n.p,{children:["Instead of exporting an array of question types as with the ",(0,t.jsx)(n.code,{children:"prompt.js"})," file, you now need to export an object with a function called prompt:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/my-generator/my-action/index.js"',children:'module.exports = {\n  prompt: ({ prompter, args }) =>\n    prompter\n      .prompt({\n        type: "input",\n        name: "email",\n        message: "What\'s your email?",\n      })\n      .then(({ email }) =>\n        prompter.prompt({\n          type: "input",\n          name: "emailConfirmation",\n          message: `Please type your email [${email}] again:`,\n        })\n      ),\n};\n'})}),"\n",(0,t.jsx)(n.h3,{id:"skipping-prompt",children:"Skipping prompt"}),"\n",(0,t.jsxs)(n.p,{children:["You can return ",(0,t.jsx)(n.code,{children:"Promise"})," to skip prompt conditionally"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/my-generator/my-action/index.js"',children:'module.exports = {\n  prompt: ({ prompter, args }) => {\n    if (args.age > 18) {\n      return Promise.resolve({ allow: true });\n    }\n    return prompter.prompt({\n      type: "input",\n      name: "age",\n      message: "whats your age?",\n    });\n  },\n};\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Or you can completely skip prompt by using ",(0,t.jsx)(n.code,{children:"params"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/my-generator/my-action/index.js"',children:"module.exports = {\n  params: ({ args }) => {\n    return { moreConvenientName: args.foobamboozle };\n  },\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"argument-utils-module",children:"Argument utils module"}),"\n",(0,t.jsxs)(n.p,{children:["References: ",(0,t.jsx)(n.a,{href:"https://github.com/jondot/hygen/issues/35#issuecomment-522282209",children:"Advance prompt improvement - Github"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/promptArgsUtil.js"',children:"module.exports =\n  (questions) =>\n  ({ prompter, args }) => {\n    const providedArgs = questions.reduce((selectedArgs, question) => {\n      if (args[question.name])\n        selectedArgs[question.name] = args[question.name];\n      return selectedArgs;\n    }, {});\n    return prompter.prompt(questions.filter(({ name }) => !providedArgs[name]));\n  };\n"})}),"\n",(0,t.jsx)(n.p,{children:"Usage:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="_templates/my-generator/my-action/index.js"',children:'const promptArgs = require("../../promptArgsUtil");\n\nconst questions = [\n  {\n    type: "select",\n    name: "level",\n    message: "What is the level of the component?",\n    choices: [\n      { title: "Atoms", value: "atoms" },\n      { title: "Molecules", value: "molecules" },\n      { title: "Organisms", value: "organisms" },\n      { title: "Templates", value: "templates" },\n    ],\n  },\n  {\n    type: "input",\n    name: "name",\n    message: "What is the name of the component?",\n  },\n];\nmodule.exports = {\n  prompt: promptArgs(questions),\n};\n'})}),"\n",(0,t.jsx)(n.h2,{id:"document-your-prompt",children:"Document your prompt"}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"message"})," to build generator help screens."]}),"\n",(0,t.jsxs)(n.p,{children:["Looking at our generator layout from before, we add a ",(0,t.jsx)(n.code,{children:"help"})," action:"]}),"\n",(0,t.jsx)(n.p,{children:"Structure:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-markup",children:".\n\u2514\u2500\u2500 _templates/\n    \u2514\u2500\u2500 mailer/\n        \u251c\u2500\u2500 help/               <-- add new help generator\n        \u2502   \u2514\u2500\u2500 index.ejs.t     <-- and new template\n        \u2514\u2500\u2500 new/\n            \u251c\u2500\u2500 prompt.js\n            \u251c\u2500\u2500 html.ejs.t\n            \u2514\u2500\u2500 text.ejs.t\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Our ",(0,t.jsx)(n.code,{children:"index.ejs.t"})," is simply a blank template, with just a ",(0,t.jsx)(n.code,{children:"message:"})," prop:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nmessage: |\n  - hygen {bold mailer} new --name [NAME]\n---\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"{bold mailer}"})," is a special coloring syntax."]}),(0,t.jsxs)(n.p,{children:["For more styles: ",(0,t.jsx)(n.a,{href:"https://github.com/chalk/chalk#styles",children:"chalk"}),"."]})]}),"\n",(0,t.jsx)(n.p,{children:"To see the message, just run:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen mailer help\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"warning",children:[(0,t.jsxs)(n.p,{children:["In ",(0,t.jsx)(n.code,{children:"hygen@6.2.11"}),", ",(0,t.jsx)(n.code,{children:"chalk.template"})," has an error. To fix it, use ",(0,t.jsx)(n.a,{href:"https://github.com/ds300/patch-package",children:"patch-package"})," and patch diff below:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'diff --git a/node_modules/hygen/dist/logger.js b/node_modules/hygen/dist/logger.js\nindex 312f112..036c45d 100644\n--- a/node_modules/hygen/dist/logger.js\n+++ b/node_modules/hygen/dist/logger.js\n@@ -5,7 +5,8 @@ var __importDefault = (this && this.__importDefault) || function (mod) {\n Object.defineProperty(exports, "__esModule", { value: true });\n const chalk_1 = __importDefault(require("chalk"));\n // chalk 4.1.2 doesn\'t type template property\n-const { yellow, red, green, magenta, template } = chalk_1.default;\n+const { yellow, red, green, magenta } = chalk_1.default;\n+const template = require(\'chalk/source/templates\');\n class Logger {\n     constructor(log) {\n         this.log = log;\n'})})]}),"\n",(0,t.jsx)(n.h2,{id:"selecting-parts-of-a-generator",children:"Selecting parts of a Generator"}),"\n",(0,t.jsx)(n.p,{children:"The complete form is:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen GENERATOR ACTION:SUBACTION\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Where ",(0,t.jsx)(n.code,{children:"SUBACTION"})," is a regular expression or a simple string hygen uses to pick up the subset of templates you want from a generator."]}),"\n",(0,t.jsxs)(n.p,{children:["Since we have a file named ",(0,t.jsx)(n.code,{children:"text.ejs.t"}),", the string text in ",(0,t.jsx)(n.code,{children:"new:text"})," will match it."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen mailer new:text --name textual-mailer\n"})}),"\n",(0,t.jsx)(n.p,{children:"In the same way we could have used a proper regular expression:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"$ hygen mailer new:.*xt --name textual-mailer\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.hygen.io/docs/generators",children:"Hygen official doc"})})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>i,a:()=>l});var t=s(7294);const r={},a=t.createContext(r);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);