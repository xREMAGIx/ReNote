"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[1698],{4669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=r(5893),n=r(3905);const i={sidebar_position:5},s="Relation between CvRDT and CmRDT",o={id:"crdt/relation-cvrdt-cmrdt",title:"Relation between CvRDT and CmRDT",description:"Differences",source:"@site/docs/crdt/relation-cvrdt-cmrdt.mdx",sourceDirName:"crdt",slug:"/crdt/relation-cvrdt-cmrdt",permalink:"/docs/crdt/relation-cvrdt-cmrdt",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/crdt/relation-cvrdt-cmrdt.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Operation-based Commutative Replicated Data Type (CmRDT)",permalink:"/docs/crdt/op-based-crdt"},next:{title:"Types Of CRDT",permalink:"/docs/crdt/types-of-crdt"}},d={},c=[{value:"Differences",id:"differences",level:2},{value:"Operation-based emulation of a state-based object",id:"operation-based-emulation-of-a-state-based-object",level:2},{value:"State-based emulation of an operation-based object",id:"state-based-emulation-of-an-operation-based-object",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",img:"img",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.ah)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h1,{id:"relation-between-cvrdt-and-cmrdt",children:"Relation between CvRDT and CmRDT"}),"\n",(0,a.jsx)(t.h2,{id:"differences",children:"Differences"}),"\n",(0,a.jsxs)(t.table,{children:[(0,a.jsx)(t.thead,{children:(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.th,{children:"Criteria"}),(0,a.jsx)(t.th,{children:"Operation-based CRDTs"}),(0,a.jsx)(t.th,{children:"State-based CRDTs"})]})}),(0,a.jsxs)(t.tbody,{children:[(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Representation of updates"}),(0,a.jsx)(t.td,{children:"A sequence of operations"}),(0,a.jsx)(t.td,{children:"A complete copy of the data structure's state"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Propagation of updates"}),(0,a.jsx)(t.td,{children:"Propagate individual operations"}),(0,a.jsx)(t.td,{children:"Propagate the entire state"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Convergence"}),(0,a.jsx)(t.td,{children:"Same sequence of operations in the same order"}),(0,a.jsx)(t.td,{children:"Associative, commutative, and idempotent merge function"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Memory overhead"}),(0,a.jsx)(t.td,{children:"Lower memory overhead"}),(0,a.jsx)(t.td,{children:"Higher memory overhead"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Network overhead"}),(0,a.jsx)(t.td,{children:"Higher network overhead"}),(0,a.jsx)(t.td,{children:"Lower network overhead"})]}),(0,a.jsxs)(t.tr,{children:[(0,a.jsx)(t.td,{children:"Applications"}),(0,a.jsx)(t.td,{children:"Systems that require low memory overhead and fast convergence"}),(0,a.jsx)(t.td,{children:"Systems that require low network overhead and simpler merge functions"})]})]})]}),"\n",(0,a.jsx)(t.h2,{id:"operation-based-emulation-of-a-state-based-object",children:"Operation-based emulation of a state-based object"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"spec Op based Emulate State based",src:r(9938).Z+"",width:"1668",height:"517"})}),"\n",(0,a.jsx)(t.p,{children:"Interestingly, it is always possible to emulate a state-based object using the operation-based approach, and vice-versa."}),"\n",(0,a.jsx)(t.p,{children:"In specification above, we show operation-based emulation of a state-based object (taking some liberties with notation). Ignoring queries (which pose no problems), the emulating operation- based object has a single update that computes some state-based update (after checking for its precondition) and performs merge downstream. The downstream precondition is empty because merge must be enabled in any reachable state. The emulation does not make use of compare."}),"\n",(0,a.jsx)(t.p,{children:"If the base object is a CvRDT, then merge operations commute, and the emulated object is a CmRDT."}),"\n",(0,a.jsxs)(t.p,{children:["Ref: ",(0,a.jsx)(t.a,{href:"https://inria.hal.science/inria-00555588/document",children:"A comprehensive study of Convergent and Commutative Replicated Data Types"})]}),"\n",(0,a.jsx)(t.h2,{id:"state-based-emulation-of-an-operation-based-object",children:"State-based emulation of an operation-based object"}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{alt:"spec State based Emulate Op based",src:r(868).Z+"",width:"1666",height:"905"})}),"\n",(0,a.jsx)(t.p,{children:"State-based emulation of an operation-based object essentially formalises the mechanics of an epidemic reliable broadcast, as shown in Spec. 4 (taking some liberties with notation)."}),"\n",(0,a.jsx)(t.p,{children:"Again, we ignore queries, which pose no problems. Calling an operation-based update adds it to a set of M messages to be delivered; merge takes the union of the two message sets."}),"\n",(0,a.jsx)(t.p,{children:"When an update\u2019s downstream precondition is true, the corresponding message is delivered by executing the downstream part of the update. In order to avoid duplicate deliveries, delivered messages are stored in a set D."}),"\n",(0,a.jsx)(t.p,{children:"The states of the emulating object form a monotonic semilattice. Calling or delivering an operation adds it to the relevant message set, and therefore advances the state in the partial order. merge is defined to take the union of the M sets, and is thus a LUB operation. Remark that M is identical to the causal history of the replica; non-concurrent updates appear in M in causal order. If the emulated op-based object is a CmRDT, then delivery order is satisfied. Concurrent operations appear in M in any order; if the emulated object is a CmRDT, they commute. Therefore, after two replicas merge mutually, their D sets are identical and their P payloads have equivalent state."}),"\n",(0,a.jsxs)(t.p,{children:["Ref: ",(0,a.jsx)(t.a,{href:"https://inria.hal.science/inria-00555588/document",children:"A comprehensive study of Convergent and Commutative Replicated Data Types"})]})]})}function h(e={}){const{wrapper:t}={...(0,n.ah)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},3905:(e,t,r)=>{r.d(t,{ah:()=>c});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var d=a.createContext({}),c=function(e){var t=a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,d=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,u=p["".concat(d,".").concat(m)]||p[m]||l[m]||i;return r?a.createElement(u,s(s({ref:t},h),{},{components:r})):a.createElement(u,s({ref:t},h))}));h.displayName="MDXCreateElement"},9938:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/opBasedEmulateStateBased-8c594d0d1dc0d877b2597b9c8966ec6d.png"},868:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/stateBasedEmulateOpBased-b5837a3e5ea4ea24f91d8a540eb46990.png"}}]);