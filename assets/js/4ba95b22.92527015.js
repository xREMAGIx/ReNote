"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[2984],{9652:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var i=a(5893),r=a(1151);const o={sidebar_position:3},t="Container Manipulation",s={id:"docker/container-manipulation",title:"Container Manipulation",description:"Managing, creating, and deleting instances of Docker containers for efficient deployment and scaling of applications.",source:"@site/docs/docker/container-manipulation.md",sourceDirName:"docker",slug:"/docker/container-manipulation",permalink:"/renote/docs/docker/container-manipulation",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/docker/container-manipulation.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Image Manipulation",permalink:"/renote/docs/docker/image-manipulation"},next:{title:"Containerize JavaScript application",permalink:"/renote/docs/docker/containerize-js-app"}},c={},d=[{value:"General syntax",id:"general-syntax",level:2},{value:"Run a container",id:"run-a-container",level:2},{value:"Publish a Port",id:"publish-a-port",level:2},{value:"Use dettach mode",id:"use-dettach-mode",level:2},{value:"List containers",id:"list-containers",level:2},{value:"Name or Rename a Container",id:"name-or-rename-a-container",level:2},{value:"Stop or Kill a Running Container",id:"stop-or-kill-a-running-container",level:2},{value:"Restart a Container",id:"restart-a-container",level:2},{value:"Different",id:"different",level:4},{value:"Create a Container without running",id:"create-a-container-without-running",level:2},{value:"Remove dangling container",id:"remove-dangling-container",level:2},{value:"Run a Container in Interactive mode",id:"run-a-container-in-interactive-mode",level:2},{value:"Execute commands inside a Container",id:"execute-commands-inside-a-container",level:2},{value:"Work With Executable Images",id:"work-with-executable-images",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"container-manipulation",children:"Container Manipulation"}),"\n",(0,i.jsx)(n.p,{children:"Managing, creating, and deleting instances of Docker containers for efficient deployment and scaling of applications."}),"\n",(0,i.jsx)(n.h2,{id:"general-syntax",children:"General syntax"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker <object> <command> <options> <image name>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"object"}),": indicates the type of Docker object you'll be manipulating. Includes: ",(0,i.jsx)(n.code,{children:"container"}),", ",(0,i.jsx)(n.code,{children:"image"}),", ",(0,i.jsx)(n.code,{children:"network"})," or ",(0,i.jsx)(n.code,{children:"volume"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"command"}),": indicates the task to be carried out by the daemon, that is the ",(0,i.jsx)(n.code,{children:"run"})," command."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"options"}),": can be any valid parameter that can override the default behavior of the command, like the ",(0,i.jsx)(n.code,{children:"--publish"})," option for port mapping."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"image name"}),": can be of any image from an online registry or your local system"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"run-a-container",children:"Run a container"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run <image name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"docker run"})," used to create and start a container using image."]}),"\n",(0,i.jsx)(n.h2,{id:"publish-a-port",children:"Publish a Port"}),"\n",(0,i.jsx)(n.p,{children:"Containers are isolated environments."}),"\n",(0,i.jsxs)(n.p,{children:["To allow access from outside of a container, you must publish the appropriate port inside the container to a port on your local network, using syntax ",(0,i.jsx)(n.code,{children:"--publish"})," (shorthand ",(0,i.jsx)(n.code,{children:"-p"}),")."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--publish <host port>:<container port>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When you wrote ",(0,i.jsx)(n.code,{children:"--publish 8080:80"})," in the previous sub-section, it meant any request sent to port ",(0,i.jsx)(n.strong,{children:"8080"})," of your host system will be forwarded to port ",(0,i.jsx)(n.strong,{children:"80"})," inside the container\u200c."]}),"\n",(0,i.jsx)(n.h2,{id:"use-dettach-mode",children:"Use dettach mode"}),"\n",(0,i.jsx)(n.p,{children:"By default, containers run in the foreground and attach themselves to the terminal like any other normal program invoked from the terminal."}),"\n",(0,i.jsxs)(n.p,{children:["In order to keep a container running in background, you can include the ",(0,i.jsx)(n.code,{children:"--detach"})," (shorthand ",(0,i.jsx)(n.code,{children:"-d"}),") option with the run command as follows:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run --detach --publish 8080:80 fhsinchy/hello-dock\n\n# 9f21cb77705810797c4b847dbd330d9c732ffddba14fb435470567a7a3f46cdc\n"})}),"\n",(0,i.jsx)(n.p,{children:"What you'll get is the ID of the newly created container."}),"\n",(0,i.jsx)(n.h2,{id:"list-containers",children:"List containers"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"container ls"})," (alias ",(0,i.jsx)(n.code,{children:"container ps"}),") command can be used to list out containers that are ",(0,i.jsx)(n.strong,{children:"currently running"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker container ls\n\n# CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS                  NAMES\n# 9f21cb777058        fhsinchy/hello-dock   "/docker-entrypoint.\u2026"   5 seconds ago       Up 5 seconds        0.0.0.0:8080->80/tcp   gifted_sammet\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CONTAINER ID"}),": the first 12 characters of the full container ID. The full container ID is 64 characters long"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"IMAGE"}),": image name"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"COMMAND"}),": the command that was executed when the container was started (it's a mix of entrypoint and cmd depending on how those things are mixed in the dockerfile(s) and command-line.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CREATED"}),": created time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"STATUS"}),": container status"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PORTS"}),": port mappings of container (format ",(0,i.jsx)(n.code,{children:"[PRIVATE_PORT[/PROTO]]"}),")."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"Ex: `0.0.0.0:8080->80/tcp` means:\n\n- `0.0.0.0` (an alias for any adaptor on `localhost`)\n- `8080` port traffic maps to this container's port `80`\n- Using `TCP` (another protocol that you will see is `UDP`)\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NAMES"}),": generated by Docker, combination of two random words, joined with an underscore."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"name-or-rename-a-container",children:"Name or Rename a Container"}),"\n",(0,i.jsxs)(n.p,{children:["Naming a container can be achieved using the ",(0,i.jsx)(n.code,{children:"--name"})," option."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--name <container identifier> <new name>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can rename old containers using the ",(0,i.jsx)(n.code,{children:"container rename"})," command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container rename <container identifier> <new name>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"stop-or-kill-a-running-container",children:"Stop or Kill a Running Container"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container stop <container identifier>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Where ",(0,i.jsx)(n.code,{children:"container identifier"})," can either be the id or the name of the container."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"stop"})," command shuts down a container gracefully by sending a ",(0,i.jsx)(n.code,{children:"SIGTERM"})," signal."]}),"\n",(0,i.jsxs)(n.p,{children:["If the container doesn't stop within a certain period, a ",(0,i.jsx)(n.code,{children:"SIGKILL"})," signal is sent which shuts down the container ",(0,i.jsx)(n.strong,{children:"immediately"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container kill <container identifier>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"container kill"})," command will send a ",(0,i.jsx)(n.code,{children:"SIGKILL"})," signal instead of a ",(0,i.jsx)(n.code,{children:"SIGTERM"})," signal"]}),"\n",(0,i.jsx)(n.h2,{id:"restart-a-container",children:"Restart a Container"}),"\n",(0,i.jsx)(n.p,{children:"They are two scenarios:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Restarting a container that has been previously stopped or killed."}),"\n",(0,i.jsx)(n.li,{children:"Rebooting a running container."}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"container start"})," command can be used to start any stopped or killed container"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container start <container identifier>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In scenarios where you would like to reboot a running container you may use the ",(0,i.jsx)(n.code,{children:"container restart"})," command"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container restart <container identifier>\n"})}),"\n",(0,i.jsx)(n.h4,{id:"different",children:"Different"}),"\n",(0,i.jsxs)(n.p,{children:["The container ",(0,i.jsx)(n.code,{children:"restart"})," command attempts to stop the target container and then starts it back up again."]}),"\n",(0,i.jsxs)(n.p,{children:["Whereas the ",(0,i.jsx)(n.code,{children:"start"})," command just starts an already stopped container."]}),"\n",(0,i.jsx)(n.p,{children:"In case of a stopped container, both commands are exactly the same."}),"\n",(0,i.jsxs)(n.p,{children:["In case of a running container, you must use the ",(0,i.jsx)(n.code,{children:"container restart"})," command."]}),"\n",(0,i.jsx)(n.h2,{id:"create-a-container-without-running",children:"Create a Container without running"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"container run"})," command which is in reality a combination of two separate commands."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"container create"})," command creates a container from a given image."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"container start"})," command starts a container that has been already created."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"We can run a container step by step using above commands"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker container create --publish 8080:80 fhsinchy/hello-dock\n\n# 2e7ef5098bab92f4536eb9a372d9b99ed852a9a816c341127399f51a6d053856\n\ndocker container ls --all\n\n# CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS              PORTS               NAMES\n# 2e7ef5098bab        fhsinchy/hello-dock   "/docker-entrypoint.\u2026"   30 seconds ago      Created                                 hello-dock\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker container start hello-dock\n\n# hello-dock\n\ndocker container ls\n\n# CONTAINER ID        IMAGE                 COMMAND                  CREATED              STATUS              PORTS                  NAMES\n# 2e7ef5098bab        fhsinchy/hello-dock   "/docker-entrypoint.\u2026"   About a minute ago   Up 29 seconds       0.0.0.0:8080->80/tcp   hello-dock\n\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"STATUS"})," has changed from ",(0,i.jsx)(n.em,{children:"Created"})," to ",(0,i.jsx)(n.em,{children:"Up 29 seconds"})," which indicates that the container is now in running state"]}),"\n",(0,i.jsxs)(n.p,{children:["The port configuration has also shown up in the ",(0,i.jsx)(n.strong,{children:"PORTS"})," column which was previously ",(0,i.jsx)(n.em,{children:"empty"})]}),"\n",(0,i.jsx)(n.h2,{id:"remove-dangling-container",children:"Remove dangling container"}),"\n",(0,i.jsx)(n.p,{children:"Containers that have been stopped or killed remain in the system. It can take up space and cause conflict with newer containers."}),"\n",(0,i.jsxs)(n.p,{children:["In order to remove a stopped container you can use the ",(0,i.jsx)(n.code,{children:"container rm"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container rm <container identifier>\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can also remove multiple containers at once by passing their identifiers one after another separated by spaces."}),"\n",(0,i.jsxs)(n.p,{children:["Or if you want to remove all dangling containers at one go, you can use the ",(0,i.jsx)(n.code,{children:"container prune"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container prune\n"})}),"\n",(0,i.jsxs)(n.p,{children:["There is also the ",(0,i.jsx)(n.code,{children:"--rm"})," option for the ",(0,i.jsx)(n.code,{children:"container run"})," and ",(0,i.jsx)(n.code,{children:"container start"})," commands which indicates that you want the containers removed as soon as they're stopped."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run --rm --detach --publish 8888:80 --name hello-dock-volatile fhsinchy/hello-dock\n\n# 0d74e14091dc6262732bee226d95702c21894678efb4043663f7911c53fb79f3\n"})}),"\n",(0,i.jsx)(n.h2,{id:"run-a-container-in-interactive-mode",children:"Run a Container in Interactive mode"}),"\n",(0,i.jsxs)(n.p,{children:["An image configured to run such as shell is ",(0,i.jsx)(n.strong,{children:"an interactive image"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["These images require a special ",(0,i.jsx)(n.code,{children:"-it"})," option to be passed in the ",(0,i.jsx)(n.code,{children:"container run"})," command."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run -it node\n\n# Welcome to Node.js v15.0.0.\n# Type \".help\" for more information.\n> ['farhan', 'hasin', 'chowdhury'].map(name => name.toUpperCase())\n# [ 'FARHAN', 'HASIN', 'CHOWDHURY' ]\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you run a container using the node image by executing ",(0,i.jsx)(n.code,{children:"docker container run node"})," you'll see ",(0,i.jsx)(n.strong,{children:"nothing happens"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"-it"})," option is actually two separate options mashed together, you can run them seperately:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"-i"})," or ",(0,i.jsx)(n.code,{children:"--interactive"})," option connects you to the input stream of the container, so that you can send inputs to bash."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"-t"})," or ",(0,i.jsx)(n.code,{children:"--tty"})," option makes sure that you get some good formatting and a native terminal-like experience by allocating a pseudo-tty."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"execute-commands-inside-a-container",children:"Execute commands inside a Container"}),"\n",(0,i.jsx)(n.p,{children:"And the generic syntax for passing a command to a container that is not running is as follows:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run <image name> <command>\n"})}),"\n",(0,i.jsx)(n.p,{children:"For example, to perform the base64 encoding using the busybox image, you can execute the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'docker container run --rm busybox sh -c "echo -n my-secret | base64\n\n# bXktc2VjcmV0\n'})}),"\n",(0,i.jsx)(n.h2,{id:"work-with-executable-images",children:"Work With Executable Images"}),"\n",(0,i.jsx)(n.p,{children:"One way to grant a container direct access to your local file system is by using bind mounts."}),"\n",(0,i.jsxs)(n.p,{children:["A bind mount lets you form a two way data binding between the content of ",(0,i.jsx)(n.strong,{children:"a local file system directory (source)"})," and another directory inside ",(0,i.jsx)(n.strong,{children:"a container (destination)"}),". This way any changes made in the destination directory will take effect on the source directory and vise versa."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"--volume <local file system directory absolute path>:<container file system directory absolute path>:<read write access>\n"})}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"docker container run --rm -v $(pwd):/zone fhsinchy/rmbyext pdf\n\n# Removing: PDF\n# b.pdf\n# a.pdf\n# d.pdf\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://www.freecodecamp.org/news/the-docker-handbook",children:"Docker Handbook"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>s,a:()=>t});var i=a(7294);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);