"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[4605],{272:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var o=t(5893),r=t(1151);const i={sidebar_position:5},a="Network Manipulation",c={id:"docker/network-manipulcation",title:"Network Manipulation",description:"Facilitates communication between containers running on the same host or different hosts, allowing them to interact with each other.",source:"@site/docs/docker/network-manipulcation.md",sourceDirName:"docker",slug:"/docker/network-manipulcation",permalink:"/renote/docs/docker/network-manipulcation",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/docker/network-manipulcation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Containerize JavaScript application",permalink:"/renote/docs/docker/containerize-js-app"},next:{title:"Containerize Multi-container JavaScript application",permalink:"/renote/docs/docker/containerize-multi-js-app"}},s={},d=[{value:"Create a User-defined bridge",id:"create-a-user-defined-bridge",level:2},{value:"Attach a Container to a Network",id:"attach-a-container-to-a-network",level:2},{value:"Detach a Container from a Network",id:"detach-a-container-from-a-network",level:2},{value:"Remove Networks",id:"remove-networks",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"network-manipulation",children:"Network Manipulation"}),"\n",(0,o.jsx)(n.p,{children:"Facilitates communication between containers running on the same host or different hosts, allowing them to interact with each other."}),"\n",(0,o.jsx)(n.h2,{id:"create-a-user-defined-bridge",children:"Create a User-defined bridge"}),"\n",(0,o.jsx)(n.p,{children:"Two containers are completely isolated from each other and are oblivious to each other's existence. So how do you connect the two? Won't that be a challenge?\u200c"}),"\n",(0,o.jsxs)(n.p,{children:["You connect them by putting them under a ",(0,o.jsx)(n.strong,{children:"user-defined bridge network"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"A user-defined bridge has some extra features over the default one."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"User-defined bridges provide automatic DNS resolution between containers"}),": Containers attached to the same network can communicate with each others using the container name."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"User-defined bridges provide better isolation"}),": All containers are attached to the default bridge network by default which can cause conflicts among them. Attaching containers to a user-defined bridge can ensure better isolation."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Containers can be attached and detached from user-defined networks on the fly"}),": During a container\u2019s lifetime, you can connect or disconnect it from user-defined networks on the fly. To remove a container from the default bridge network, you need to stop the container and recreate it with different network options."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["A network can be created using the ",(0,o.jsx)(n.code,{children:"network create"})," command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network create <network name>\n"})}),"\n",(0,o.jsx)(n.p,{children:"We can try these following commands:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network create skynet\n\n# 7bd5f351aa892ac6ec15fed8619fc3bbb95a7dcdd58980c28304627c8f7eb070\n\ndocker network ls\n\n# NETWORK ID     NAME     DRIVER    SCOPE\n# be0cab667c4b   bridge   bridge    local\n# 124dccee067f   host     host      local\n# 506e3822bf1f   none     null      local\n# 7bd5f351aa89   skynet   bridge    local\n"})}),"\n",(0,o.jsx)(n.h2,{id:"attach-a-container-to-a-network",children:"Attach a Container to a Network"}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.code,{children:"network connect"})," command to attach a container to a network."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network connect <network identifier> <container identifier>\n"})}),"\n",(0,o.jsxs)(n.p,{children:["To connect the ",(0,o.jsx)(n.code,{children:"hello-dock"})," container to the ",(0,o.jsx)(n.code,{children:"skynet"})," network, execute:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network connect skynet hello-dock\n\ndocker network inspect --format='{{range .Containers}} {{.Name}} {{end}}' skynet\n\n#  hello-dock\n\ndocker network inspect --format='{{range .Containers}} {{.Name}} {{end}}' bridge\n\n#  hello-dock\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Another way to attach a container to a network is by using the ",(0,o.jsx)(n.code,{children:"--network"})," option for the ",(0,o.jsx)(n.code,{children:"container run"})," or ",(0,o.jsx)(n.code,{children:"container create"})," commands."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"--network <network identifier>\n"})}),"\n",(0,o.jsx)(n.p,{children:"We can execute the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker container run --network skynet --rm --name alpine-box -it alpine sh\n\n# lands you into alpine linux shell\n\n/ # ping hello-dock\n\n# PING hello-dock (172.18.0.2): 56 data bytes\n# 64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.191 ms\n# 64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.103 ms\n# 64 bytes from 172.18.0.2: seq=2 ttl=64 time=0.139 ms\n# 64 bytes from 172.18.0.2: seq=3 ttl=64 time=0.142 ms\n# 64 bytes from 172.18.0.2: seq=4 ttl=64 time=0.146 ms\n# 64 bytes from 172.18.0.2: seq=5 ttl=64 time=0.095 ms\n# 64 bytes from 172.18.0.2: seq=6 ttl=64 time=0.181 ms\n# 64 bytes from 172.18.0.2: seq=7 ttl=64 time=0.138 ms\n# 64 bytes from 172.18.0.2: seq=8 ttl=64 time=0.158 ms\n# 64 bytes from 172.18.0.2: seq=9 ttl=64 time=0.137 ms\n# 64 bytes from 172.18.0.2: seq=10 ttl=64 time=0.145 ms\n# 64 bytes from 172.18.0.2: seq=11 ttl=64 time=0.138 ms\n# 64 bytes from 172.18.0.2: seq=12 ttl=64 time=0.085 ms\n\n--- hello-dock ping statistics ---\n13 packets transmitted, 13 packets received, 0% packet loss\nround-trip min/avg/max = 0.085/0.138/0.191 ms\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["In order for the automatic DNS resolution to work you ",(0,o.jsx)(n.strong,{children:"must assign custom names"})," to the containers. Using the randomly generated name will not work."]})}),"\n",(0,o.jsx)(n.h2,{id:"detach-a-container-from-a-network",children:"Detach a Container from a Network"}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.code,{children:"network disconnect"})," command for this."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network disconnect <network identifier> <container identifier>\n"})}),"\n",(0,o.jsx)(n.p,{children:"For example, we can execute the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network disconnect skynet hello-dock\n"})}),"\n",(0,o.jsx)(n.h2,{id:"remove-networks",children:"Remove Networks"}),"\n",(0,o.jsxs)(n.p,{children:["Networks can be removed using the ",(0,o.jsx)(n.code,{children:"network rm"})," command."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network rm <network identifier>\n"})}),"\n",(0,o.jsx)(n.p,{children:"For example, we can execute the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker network rm skynet\n"})}),"\n",(0,o.jsxs)(n.p,{children:["You can also use the ",(0,o.jsx)(n.code,{children:"network prune"})," command to remove any unused networks from your system."]}),"\n",(0,o.jsxs)(n.p,{children:["The command also has the ",(0,o.jsx)(n.code,{children:"-f"})," or ",(0,o.jsx)(n.code,{children:"--force"})," and ",(0,o.jsx)(n.code,{children:"-a"})," or ",(0,o.jsx)(n.code,{children:"--all"})," options."]}),"\n",(0,o.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://www.freecodecamp.org/news/the-docker-handbook/#how-to-containerize-a-javascript-application",children:"Docker Handbook"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>a});var o=t(7294);const r={},i=o.createContext(r);function a(e){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(i.Provider,{value:n},e.children)}}}]);