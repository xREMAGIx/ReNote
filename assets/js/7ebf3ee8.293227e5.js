"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[8293],{2178:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var a=l(5893),t=l(1151);const s={},d="PostgreSQL",r={id:"sql/postgres",title:"PostgreSQL",description:"Create a new table",source:"@site/docs/sql/postgres.mdx",sourceDirName:"sql",slug:"/sql/postgres",permalink:"/renote/docs/sql/postgres",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/sql/postgres.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SQL",permalink:"/renote/docs/category/sql"},next:{title:"Tools",permalink:"/renote/docs/category/tools"}},i={},c=[{value:"Create a new table",id:"create-a-new-table",level:2},{value:"Add data to a table",id:"add-data-to-a-table",level:2},{value:"Query data from a table",id:"query-data-from-a-table",level:2},{value:"Select all",id:"select-all",level:3},{value:"Select specific columns",id:"select-specific-columns",level:3},{value:"Count",id:"count",level:3},{value:"Filter",id:"filter",level:3},{value:"Order",id:"order",level:3},{value:"Limit",id:"limit",level:3},{value:"Update data in a table",id:"update-data-in-a-table",level:2},{value:"Update all",id:"update-all",level:3},{value:"Update specific rows",id:"update-specific-rows",level:3},{value:"Delete data from a table",id:"delete-data-from-a-table",level:2},{value:"Delete all",id:"delete-all",level:3},{value:"Delete specific rows",id:"delete-specific-rows",level:3},{value:"Drop table",id:"drop-table",level:3},{value:"Null values",id:"null-values",level:2},{value:"Unique values and primary keys",id:"unique-values-and-primary-keys",level:2},{value:"Foreign keys",id:"foreign-keys",level:2},{value:"Update a table structure",id:"update-a-table-structure",level:2},{value:"Add a column",id:"add-a-column",level:3},{value:"Modify a column",id:"modify-a-column",level:3},{value:"Delete a column",id:"delete-a-column",level:3},{value:"Joins",id:"joins",level:2},{value:"Inner join",id:"inner-join",level:3},{value:"Left join",id:"left-join",level:3},{value:"Right join",id:"right-join",level:3},{value:"Full join",id:"full-join",level:3},{value:"Type cheatsheet",id:"type-cheatsheet",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"postgresql",children:"PostgreSQL"}),"\n",(0,a.jsx)(n.h2,{id:"create-a-new-table",children:"Create a new table"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE table_name (\n    column_name1 data_type,\n    column_name2 data_type,\n    column_name3 data_type\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"add-data-to-a-table",children:"Add data to a table"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT INTO table_name (column1, column2, column3)\nVALUES (value1, value2, value3);\n"})}),"\n",(0,a.jsx)(n.p,{children:"If you want to only fill in certain columns, you can specify which columns to insert data into:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"INSERT INTO table_name (column1, column2)\nVALUES (value1, value2);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"query-data-from-a-table",children:"Query data from a table"}),"\n",(0,a.jsx)(n.h3,{id:"select-all",children:"Select all"}),"\n",(0,a.jsx)(n.p,{children:"Select all data from a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM table_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"select-specific-columns",children:"Select specific columns"}),"\n",(0,a.jsx)(n.p,{children:"Select specific columns from a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column1, column2 FROM table_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"count",children:"Count"}),"\n",(0,a.jsx)(n.p,{children:"Count the number of rows in a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT COUNT(*) FROM table_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"filter",children:"Filter"}),"\n",(0,a.jsx)(n.p,{children:"Filter data based on a condition:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM table_name WHERE condition;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"order",children:"Order"}),"\n",(0,a.jsxs)(n.p,{children:["The result of a query can be ordered by one or more columns, ",(0,a.jsx)(n.strong,{children:"ascending"})," (the default) or ",(0,a.jsx)(n.strong,{children:"descending"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM table_name ORDER BY column1, column2 DESC;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"limit",children:"Limit"}),"\n",(0,a.jsx)(n.p,{children:"Limit the number of rows returned from a query:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT * FROM table_name LIMIT 5;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"update-data-in-a-table",children:"Update data in a table"}),"\n",(0,a.jsx)(n.h3,{id:"update-all",children:"Update all"}),"\n",(0,a.jsx)(n.p,{children:"Update all data in a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE table_name SET column1 = value1, column2 = value2, ...;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"update-specific-rows",children:"Update specific rows"}),"\n",(0,a.jsx)(n.p,{children:"Update specific rows in a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"UPDATE table_name SET column1 = value1, column2 = value2, ... WHERE condition;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"delete-data-from-a-table",children:"Delete data from a table"}),"\n",(0,a.jsx)(n.h3,{id:"delete-all",children:"Delete all"}),"\n",(0,a.jsx)(n.p,{children:"Delete all data from a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DELETE FROM table_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"delete-specific-rows",children:"Delete specific rows"}),"\n",(0,a.jsx)(n.p,{children:"Delete specific rows from a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DELETE FROM table_name WHERE condition;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"drop-table",children:"Drop table"}),"\n",(0,a.jsx)(n.p,{children:"Delete a table:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"DROP TABLE table_name;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"null-values",children:"Null values"}),"\n",(0,a.jsxs)(n.p,{children:["A field with a ",(0,a.jsx)(n.code,{children:"NULL"})," value is a field with no value."]}),"\n",(0,a.jsxs)(n.p,{children:["It is very important to understand that a ",(0,a.jsx)(n.code,{children:"NULL"})," value is different from a zero value or a field that contains spaces. A field with a ",(0,a.jsx)(n.code,{children:"NULL"})," value is one that has been left blank during record creation!"]}),"\n",(0,a.jsxs)(n.p,{children:["To prevent ",(0,a.jsx)(n.code,{children:"NULL"})," values in a column, use the ",(0,a.jsx)(n.code,{children:"NOT NULL"})," constraint:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE table_name (\n    column_name data_type NOT NULL,\n    column_name data_type NOT NULL,\n    column_name data_type NOT NULL\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To check if a value is ",(0,a.jsx)(n.code,{children:"NULL"})," or not, use the ",(0,a.jsx)(n.code,{children:"IS NULL"})," and ",(0,a.jsx)(n.code,{children:"IS NOT NULL"})," operators:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column1, column2 FROM table_name WHERE column1 IS NULL;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"unique-values-and-primary-keys",children:"Unique values and primary keys"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.code,{children:"UNIQUE"})," constraint ensures that all values in a column are different."]}),"\n",(0,a.jsxs)(n.p,{children:["Both the ",(0,a.jsx)(n.code,{children:"UNIQUE"})," and ",(0,a.jsx)(n.code,{children:"PRIMARY KEY"})," constraints provide a guarantee for uniqueness for a column or set of columns."]}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.code,{children:"PRIMARY KEY"})," constraint automatically has a ",(0,a.jsx)(n.code,{children:"UNIQUE"})," constraint."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE table_name (\n    column1 data_type UNIQUE,\n    column2 data_type UNIQUE,\n    column3 data_type UNIQUE\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:["We use the ",(0,a.jsx)(n.code,{children:"SERIAL"})," type for the primary key, which means it's a unique ",(0,a.jsx)(n.code,{children:"INTEGER"})," value that gets automatically generated by the system."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE table_name (\n    id SERIAL PRIMARY KEY,\n    column1 data_type,\n    column2 data_type,\n    column3 data_type\n);\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Primary keys"})," helps us:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Ensure data in a specific column is unique."}),"\n",(0,a.jsx)(n.li,{children:"Identify each row in a table."}),"\n",(0,a.jsx)(n.li,{children:"Quickly find a row in a table."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"foreign-keys",children:"Foreign keys"}),"\n",(0,a.jsxs)(n.p,{children:["A ",(0,a.jsx)(n.strong,{children:"foreign key"})," is a column or group of columns in a table that links to a column or group of columns in another table."]}),"\n",(0,a.jsxs)(n.p,{children:["The table containing the foreign key is called the ",(0,a.jsx)(n.strong,{children:"child table"}),", and the table containing the candidate key is called the ",(0,a.jsx)(n.strong,{children:"referenced"})," or ",(0,a.jsx)(n.strong,{children:"parent table"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE table_name (\n    id SERIAL PRIMARY KEY,\n    column1 data_type,\n    column2 data_type,\n    column3 data_type,\n    foreign_key_column INT REFERENCES other_table_name(id)\n);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"update-a-table-structure",children:"Update a table structure"}),"\n",(0,a.jsx)(n.h3,{id:"add-a-column",children:"Add a column"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE table_name ADD COLUMN column_name data_type;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"modify-a-column",children:"Modify a column"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE table_name MODIFY COLUMN column_name data_type;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"delete-a-column",children:"Delete a column"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"ALTER TABLE table_name DROP COLUMN column_name;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"joins",children:"Joins"}),"\n",(0,a.jsx)(n.h3,{id:"inner-join",children:"Inner join"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"inner join"})," keyword selects records that have matching values in both tables."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table1\nINNER JOIN table2 ON table1.column_name = table2.column_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"left-join",children:"Left join"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"left join"})," keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is ",(0,a.jsx)(n.code,{children:"NULL"})," from the right side, if there is no match."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table1\nLEFT JOIN table2 ON table1.column_name = table2.column_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"right-join",children:"Right join"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"right join"})," keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is ",(0,a.jsx)(n.code,{children:"NULL"})," from the left side, when there is no match."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table1\nRIGHT JOIN table2 ON table1.column_name = table2.column_name;\n"})}),"\n",(0,a.jsx)(n.h3,{id:"full-join",children:"Full join"}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"full join"})," keyword returns all records when there is a match in either left (table1) or right (table2) table records."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sql",children:"SELECT column_name(s)\nFROM table1\nFULL JOIN table2 ON table1.column_name = table2.column_name\nWHERE condition;\n"})}),"\n",(0,a.jsx)(n.h2,{id:"type-cheatsheet",children:"Type cheatsheet"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Type"}),(0,a.jsx)(n.th,{children:"Description"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"CHAR"})}),(0,a.jsx)(n.td,{children:"fixed-length character string."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"VARCHAR"})}),(0,a.jsx)(n.td,{children:"variable-length character string."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"TEXT"})}),(0,a.jsx)(n.td,{children:"variable-length character string."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DATE"})}),(0,a.jsx)(n.td,{children:"date value."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"TIME"})}),(0,a.jsx)(n.td,{children:"time value."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DATETIME"})}),(0,a.jsx)(n.td,{children:"date and time combination."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"TIMESTAMP"})}),(0,a.jsx)(n.td,{children:"date and time."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"INT"})}),(0,a.jsx)(n.td,{children:"integer number (4 bytes)."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"SMALLINT"})}),(0,a.jsx)(n.td,{children:"integer number (2 bytes)."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"BIGINT"})}),(0,a.jsx)(n.td,{children:"integer number (8 bytes)."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"DECIMAL"})}),(0,a.jsx)(n.td,{children:"fixed-point number."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.code,{children:"FLOAT"})}),(0,a.jsx)(n.td,{children:"floating-point number."})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},1151:(e,n,l)=>{l.d(n,{Z:()=>r,a:()=>d});var a=l(7294);const t={},s=a.createContext(t);function d(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);