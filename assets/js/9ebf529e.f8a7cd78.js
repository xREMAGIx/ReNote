"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[7170],{4083:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>c});var t=s(5893),r=s(1151);const i={sidebar_position:1},l="Templates",a={id:"hygen/templates",title:"Templates",description:"A hygen template is a header of a markdown-like frontmatter and a body of an ejs templating engine.",source:"@site/docs/hygen/templates.md",sourceDirName:"hygen",slug:"/hygen/templates",permalink:"/renote/docs/hygen/templates",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/hygen/templates.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Hygen",permalink:"/renote/docs/category/hygen"},next:{title:"Generators",permalink:"/renote/docs/hygen/generators"}},d={},c=[{value:"Overview",id:"overview",level:2},{value:"Template Structure",id:"template-structure",level:2},{value:"Frontmatter",id:"frontmatter",level:2},{value:"Template body",id:"template-body",level:2},{value:"Helpers",id:"helpers",level:2},{value:"Inflections",id:"inflections",level:3},{value:"Change-case",id:"change-case",level:3},{value:"Local variables",id:"local-variables",level:2},{value:"Directive",id:"directive",level:3},{value:"Via objects",id:"via-objects",level:3},{value:"Predefined variables",id:"predefined-variables",level:2},{value:"Addition",id:"addition",level:2},{value:"From &amp; shared templates",id:"from--shared-templates",level:2},{value:"Injection",id:"injection",level:2},{value:"Shell",id:"shell",level:2},{value:"Conditional rendering",id:"conditional-rendering",level:2},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"templates",children:"Templates"}),"\n",(0,t.jsx)(n.p,{children:"A hygen template is a header of a markdown-like frontmatter and a body of an ejs templating engine."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"templates"})," directory contains a set of files and directories that will be copied to the destination directory when the template is invoked."]}),"\n",(0,t.jsx)(n.h2,{id:"template-structure",children:"Template Structure"}),"\n",(0,t.jsx)(n.p,{children:"A Hygen template structure is as follows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"/* Metadata section using Frontmatter (Frontmatter section) */\n---\nto: app/emails/<%= name %>.html\n---\n/* Body section using ejs */\nHello <%= name %>,\n<%= message %>\n(version <%= version %>)\n"})}),"\n",(0,t.jsx)(n.p,{children:"The frontmatter section is used to define the destination path of the file."}),"\n",(0,t.jsxs)(n.p,{children:["The body section is used to define the contents of the file. The body section is rendered using the ",(0,t.jsx)(n.a,{href:"https://ejs.co/",children:"ejs"})," templating engine."]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:".ejs.t"})," extension is used to indicate that the file is a template in Hygen (optional)."]}),"\n",(0,t.jsx)(n.h2,{id:"frontmatter",children:"Frontmatter"}),"\n",(0,t.jsxs)(n.p,{children:["The frontmatter section is used to define the destination path of the file. The frontmatter section is defined using the ",(0,t.jsx)(n.a,{href:"https://yaml.org/",children:"YAML"})," format."]}),"\n",(0,t.jsxs)(n.p,{children:["The frontmatter is delimited by a matching ",(0,t.jsx)(n.code,{children:"---"})," top and bottom with yaml in it, where we define the template metadata."]}),"\n",(0,t.jsx)(n.p,{children:"For example we have this template:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",metastring:"_templates/mailer/campaign/emails.ejs.t",children:"---\nto: app/emails/<%= name %>.html\n---\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When we invoke the template, we can pass in the ",(0,t.jsx)(n.code,{children:"name"})," variable:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hygen mailer campaign emails --name=welcome\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This will create a file at ",(0,t.jsx)(n.code,{children:"app/emails/welcome.html"}),". And this frontmatter section will be replaced with the following:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"---\nto: app/emails/welcome.html\n---\n"})}),"\n",(0,t.jsx)(n.p,{children:"Some properties that we usually use:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Default"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"to:"}),(0,t.jsx)(n.td,{children:"String (url)"}),(0,t.jsx)(n.td,{children:"undefined"}),(0,t.jsx)(n.td,{children:"my-project/readme.md"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"from:"}),(0,t.jsx)(n.td,{children:"String (url)"}),(0,t.jsx)(n.td,{children:"undefined"}),(0,t.jsx)(n.td,{children:"shared/docs/readme.md"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"force:"}),(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"true"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"unless_exists:"}),(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"true"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"inject:"}),(0,t.jsx)(n.td,{children:"Boolean"}),(0,t.jsx)(n.td,{children:"false"}),(0,t.jsx)(n.td,{children:"true"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"after:"}),(0,t.jsx)(n.td,{children:"Regex"}),(0,t.jsx)(n.td,{children:"undefined"}),(0,t.jsx)(n.td,{children:"devDependencies"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"skip_if:"}),(0,t.jsx)(n.td,{children:"Regex"}),(0,t.jsx)(n.td,{children:"undefined"}),(0,t.jsx)(n.td,{children:"myPackage"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"sh:"}),(0,t.jsx)(n.td,{children:"String"}),(0,t.jsx)(n.td,{children:"undefined"}),(0,t.jsx)(n.td,{children:'echo: "Hello this is a shell command!"'})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"template-body",children:"Template body"}),"\n",(0,t.jsxs)(n.p,{children:["Templates bodies are ",(0,t.jsx)(n.a,{href:"https://ejs.co/",children:"ejs"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'---\nto: app/workers/<%=name%>.js\n---\n\n/* Body section using ejs */\n<%\n Message = message.toUpperCase()\n%>\n\nclass <%= Name %> {\n    work(){\n        return "<%= Message %>"\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["In hygen, the variable ",(0,t.jsx)(n.code,{children:"name"})," is blessed, because you can get a capitalized version of it by saying ",(0,t.jsx)(n.code,{children:"Name"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["If we wanted to capitalize some other variable (for example: ",(0,t.jsx)(n.code,{children:"message"}),") then we could do like above."]}),"\n",(0,t.jsx)(n.h2,{id:"helpers",children:"Helpers"}),"\n",(0,t.jsxs)(n.p,{children:["You can also use the built-in helpers by accessing ",(0,t.jsx)(n.code,{children:"h"}),":"]}),"\n",(0,t.jsx)(n.h3,{id:"inflections",children:"Inflections"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"h"})," hosts this ",(0,t.jsx)(n.a,{href:"https://github.com/dreamerslab/node.inflection",children:"inflections"})," package."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// example: <%= h.inflection.pluralize(name) %>\n\npluralize(str, plural);\nsingularize(str, singular);\ninflect(str, count, singular, plural);\ncamelize(str, low_first_letter);\nunderscore(str, all_upper_case);\nhumanize(str, low_first_letter);\ncapitalize(str);\ndasherize(str);\ntitleize(str);\ndemodulize(str);\ntableize(str);\nclassify(str);\nforeign_key(str, drop_id_ubar);\nordinalize(str);\ntransform(str, arr);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"change-case",children:"Change-case"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"h"})," provides ability to semantic case changing with ",(0,t.jsx)(n.a,{href:"https://github.com/blakeembrey/change-case",children:"change-case"})," library"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"// example: <%= h.changeCase.camel(name) %>\n\ncamel(str);\nconstant(str);\ndot(str);\nheader(str);\nisLower(str);\nisUpper(str);\nlower(str);\nlcFirst(str);\nno(str);\nparam(str);\npascal(str);\npath(str);\nsentence(str);\nsnake(str);\nswap(str);\ntitle(str);\nupper(str);\n"})}),"\n",(0,t.jsx)(n.p,{children:"For example we have:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="/templates/components/new"',children:'---\nto: components/<%= name %>/index.jsx\n---\nexport const <%= name %> = () => (\n  <div className="<%= h.changeCase.param(name) %>" />\n)\n'})}),"\n",(0,t.jsx)(n.p,{children:"When we run"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hygen components new --name=HelloWorld\n"})}),"\n",(0,t.jsx)(n.p,{children:"It will be compile to:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",children:'export const HelloWorld = () => <div className="hello-world" />;\n'})}),"\n",(0,t.jsx)(n.h2,{id:"local-variables",children:"Local variables"}),"\n",(0,t.jsx)(n.p,{children:"There are two ways to refer to variables:"}),"\n",(0,t.jsx)(n.h3,{id:"directive",children:"Directive"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"Hello <%= message %>\n"})}),"\n",(0,t.jsx)(n.p,{children:"This way refers to the message CLI argument or prompt parameter, in its bare form."}),"\n",(0,t.jsxs)(n.p,{children:["This also means this parameter ",(0,t.jsx)(n.strong,{children:"cannot be optional"})," (otherwise a reference error is thrown)."]}),"\n",(0,t.jsx)(n.h3,{id:"via-objects",children:"Via objects"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"Hello <%= locals.message %>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["This way refers to the message CLI argument or prompt parameter, through the ",(0,t.jsx)(n.code,{children:"locals"})," object."]}),"\n",(0,t.jsx)(n.p,{children:"This is great if you want to check a variable for existance before using it like so:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"<% if(locals.message){ -%>\n    message: <%= message %>\n<% } -%>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"predefined-variables",children:"Predefined variables"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"hygen component new:story\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"hygen"})," will break it up for you and place certain values in special variables that are automatically available in your templates:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Variables"}),(0,t.jsx)(n.th,{children:"Content"}),(0,t.jsx)(n.th,{children:"Example"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"templates"}),(0,t.jsx)(n.td,{children:"Templates path (absolute)"}),(0,t.jsx)(n.td,{children:"/User/.../project/_templates"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"actionfolder"}),(0,t.jsx)(n.td,{children:"Action path"}),(0,t.jsx)(n.td,{children:"/.../component/new"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"generator"}),(0,t.jsx)(n.td,{children:"Generator name"}),(0,t.jsx)(n.td,{children:"component"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"action"}),(0,t.jsx)(n.td,{children:"Action name"}),(0,t.jsx)(n.td,{children:"new"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"subaction"}),(0,t.jsx)(n.td,{children:"Sub-action name"}),(0,t.jsx)(n.td,{children:"story"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"cwd"}),(0,t.jsx)(n.td,{children:"Process working directory"}),(0,t.jsx)(n.td,{children:"/User/.../project"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["For example to use ",(0,t.jsx)(n.code,{children:"actionfolder"})," say:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"<%= actionfolder %>\n"})}),"\n",(0,t.jsx)(n.h2,{id:"addition",children:"Addition"}),"\n",(0,t.jsx)(n.p,{children:"By default templates are 'added' to your project as a new target file."}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a ",(0,t.jsx)(n.code,{children:"to:"})," frontmatter property, we're telling hygen where to put it. ",(0,t.jsx)(n.code,{children:"force: true"})," will tell hygen to overwrite an existing file without prompting the user ( default is ",(0,t.jsx)(n.code,{children:"force: false"})," )."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"---\nto: app/index.js\nforce: true\n---\nconsole.log('this is index!')\n"})}),"\n",(0,t.jsxs)(n.p,{children:["If a target file already exists, and you don't want to overwrite it, you can use ",(0,t.jsx)(n.code,{children:"unless_exists"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"---\nto: app/index.js\nunless_exists: true\n---\nwill not render if target exists\n"})}),"\n",(0,t.jsx)(n.h2,{id:"from--shared-templates",children:"From & shared templates"}),"\n",(0,t.jsx)(n.p,{children:"By default the body of the template is used as input to create the target file."}),"\n",(0,t.jsxs)(n.p,{children:["By specifying a ",(0,t.jsx)(n.code,{children:"from:"})," frontmatter property, we're telling hygen from which external file to load the body from."]}),"\n",(0,t.jsxs)(n.p,{children:["E.g. ",(0,t.jsx)(n.code,{children:"from: shared/docs/readme.md"})," will tell hygen to load the body from ",(0,t.jsx)(n.code,{children:"_templates/shared/docs/readme.md"}),". The body of this template is ignored"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:"---\nto: app/readme.md\nfrom: shared/docs/readme.md\n---\nTHIS BODY IS IGNORED !!!\n"})}),"\n",(0,t.jsx)(n.h2,{id:"injection",children:"Injection"}),"\n",(0,t.jsx)(n.p,{children:"You can also choose to inject a template into an existing target file."}),"\n",(0,t.jsxs)(n.p,{children:["For this to work, you need to use ",(0,t.jsx)(n.code,{children:"inject: true"})," with the accompanied inject-specific props."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:'---\ninject: true\nto: package.json\nafter: dependencies\nskip_if: react-native-fs\n---\n"react-native-fs":"*",\n'})}),"\n",(0,t.jsxs)(n.p,{children:["This template will add the ",(0,t.jsx)(n.em,{children:"react-native-fs"})," dependency into a ",(0,t.jsx)(n.em,{children:"package.json"})," file, but it will not add it twice (because of ",(0,t.jsx)(n.code,{children:"skip_if"}),")."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Property"}),(0,t.jsx)(n.th,{children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"before"}),(0,t.jsxs)(n.td,{children:["contain a regular expression of text to locate. The inject line will appear ",(0,t.jsx)(n.em,{children:"before"})," the located line."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"after"}),(0,t.jsxs)(n.td,{children:["contain a regular expression of text to locate. The inject line will appear ",(0,t.jsx)(n.em,{children:"after"})," the located line."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"prepend"}),(0,t.jsxs)(n.td,{children:["add a line to ",(0,t.jsx)(n.em,{children:"start"})," of file respectively."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"append"}),(0,t.jsxs)(n.td,{children:["add a line to ",(0,t.jsx)(n.em,{children:"end"})," of file respectively."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"at_line"}),(0,t.jsx)(n.td,{children:"contains a line number will add a line at this exact line number."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"skip_if"}),(0,t.jsx)(n.td,{children:"contains a regular expression / text. If exists, injection is skipped."})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"shell",children:"Shell"}),"\n",(0,t.jsx)(n.p,{children:"Shell actions give you the ability to trigger any shell commands. You can do things such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Copy a resource or an asset from a template into a target folder"}),"\n",(0,t.jsx)(n.li,{children:"Pipe the output of a template into a shell command"}),"\n",(0,t.jsxs)(n.li,{children:["Perform any other side-effect - ",(0,t.jsx)(n.code,{children:"touch"})," files, restart processes, trigger a ",(0,t.jsx)(n.code,{children:"yarn install"})," or what have you."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here's how to pipe a generator's output into a shell command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:'---\nsh: "mkdir -p <%= cwd %>/given/app/shell && cat > <%= cwd %>/given/app/shell/hello.piped"\n---\nhello, this was piped!\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Note that you have the ",(0,t.jsx)(n.code,{children:"cwd"})," variable pre-available to you to indicate the current working directory."]}),"\n",(0,t.jsx)(n.p,{children:"Some times you want to run a generator and just invoke an additional command. This means the shell action can be added to what ever action you wanted to perform (inject or addition)."}),"\n",(0,t.jsx)(n.p,{children:"Here's a common task: add a dependency and then run yarn install."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:'---\ninject: true\nto: package.json\nafter: dependencies\nskip_if: lodash\nsh: cd <%= cwd %> && yarn install\n---\n"lodash":"*",\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conditional-rendering",children:"Conditional rendering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ejs",children:'---\nto: "<%= message ? `where/to/render/${name}.js` : null %>"\n---\nconditionally rendering template\n'})}),"\n",(0,t.jsxs)(n.p,{children:["When hygen meets a ",(0,t.jsx)(n.code,{children:"to:"})," value that is ",(0,t.jsx)(n.code,{children:"null"}),", it will skip the output of that template, meaning it won't get rendered at all."]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.hygen.io/docs/templates",children:"Hygen official doc"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>a,a:()=>l});var t=s(7294);const r={},i=t.createContext(r);function l(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);