"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[4148],{3424:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>h,frontMatter:()=>d,metadata:()=>a,toc:()=>r});var s=o(5893),i=o(1151);const d={},t="Docker Compose",a={id:"docker/docker-compose",title:"Docker Compose",description:"Configuration files defining services, networks, and volumes for Docker applications.",source:"@site/docs/docker/docker-compose.md",sourceDirName:"docker",slug:"/docker/docker-compose",permalink:"/renote/docs/docker/docker-compose",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/docker/docker-compose.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Containerize Multi-container JavaScript application",permalink:"/renote/docs/docker/containerize-multi-js-app"},next:{title:"Dockerfile",permalink:"/renote/docs/docker/docker-file"}},c={},r=[{value:"Key features",id:"key-features",level:2},{value:"Basics",id:"basics",level:2},{value:"Start services",id:"start-services",level:2},{value:"List services",id:"list-services",level:2},{value:"Execute commands inside a running service",id:"execute-commands-inside-a-running-service",level:2},{value:"Access logs from a running service",id:"access-logs-from-a-running-service",level:2},{value:"Stop services",id:"stop-services",level:2},{value:"Compose a full-stack application",id:"compose-a-full-stack-application",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{id:"docker-compose",children:"Docker Compose"}),"\n",(0,s.jsx)(n.p,{children:"Configuration files defining services, networks, and volumes for Docker applications."}),"\n",(0,s.jsxs)(n.p,{children:["Compose is a tool for defining and ",(0,s.jsx)(n.strong,{children:"running multi-container Docker applications"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["With Compose, you use a ",(0,s.jsx)(n.strong,{children:"YAML file"})," to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{src:"https://techmormo.com/wp-content/uploads/2022/10/diagram-1-analogy.png",alt:"Docker compose diagram"})}),"\n",(0,s.jsx)(n.p,{children:"Although Compose works in all environments, it's more focused on development and testing."}),"\n",(0,s.jsxs)(n.p,{children:["Using Compose on ",(0,s.jsx)(n.strong,{children:"a production environment is not recommended"})," at all."]}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:"Key features"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Have multiple isolated environments on a single host"}),"\n",(0,s.jsx)(n.li,{children:"Preserve volume data when containers are created"}),"\n",(0,s.jsx)(n.li,{children:"Only recreate containers that have changed"}),"\n",(0,s.jsx)(n.li,{children:"Share variables or configurations between environments"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"basics",children:"Basics"}),"\n",(0,s.jsx)(n.p,{children:"We already know that this project has two containers:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"notes-db"})," - A database server powered by PostgreSQL.\n",(0,s.jsx)(n.code,{children:"notes-api"})," - A REST API powered by Express.js."]}),"\n",(0,s.jsxs)(n.p,{children:["Inside ",(0,s.jsx)(n.code,{children:"notes-api/api"})," directory and create a ",(0,s.jsx)(n.code,{children:"Dockerfile.dev"})," file:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="Dockerfile.dev"',children:'# stage one\nFROM node:lts-alpine as builder\n\n# install dependencies for node-gyp\nRUN apk add --no-cache python make g++\n\nWORKDIR /app\n\nCOPY ./package.json .\nRUN npm install\n\n# stage two\nFROM node:lts-alpine\n\nENV NODE_ENV=development\n\nUSER node\nRUN mkdir -p /home/node/app\nWORKDIR /home/node/app\n\nCOPY . .\nCOPY --from=builder /app/node_modules /home/node/app/node_modules\n\nCMD [ "./node_modules/.bin/nodemon", "--config", "nodemon.json", "bin/www" ]\n'})}),"\n",(0,s.jsxs)(n.p,{children:["In the world of Compose, each container that makes up the application is known as a ",(0,s.jsx)(n.strong,{children:"service"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"The first step in composing a multi-container project is to define these services."}),"\n",(0,s.jsxs)(n.p,{children:["Docker Compose uses a ",(0,s.jsx)(n.strong,{children:"docker-compose.yaml"})," file to read service definitions from."]}),"\n",(0,s.jsxs)(n.p,{children:["We will head to the notes-api directory and create a new ",(0,s.jsx)(n.code,{children:"docker-compose.yaml"})," file"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="docker-compose.yaml"',children:'version: "3.8"\n\nservices:\n    db:\n        image: postgres:12\n        container_name: notes-db-dev\n        volumes:\n            - notes-db-dev-data:/var/lib/postgresql/data\n        environment:\n            POSTGRES_DB: notesdb\n            POSTGRES_PASSWORD: secret\n    api:\n        build:\n            context: ./api\n            dockerfile: Dockerfile.dev\n        image: notes-api:dev\n        container_name: notes-api-dev\n        environment:\n            DB_HOST: db ## same as the database service name\n            DB_DATABASE: notesdb\n            DB_PASSWORD: secret\n        volumes:\n            - /home/node/app/node_modules\n            - ./api:/home/node/app\n        ports:\n            - 3000:3000\n\nvolumes:\n    notes-db-dev-data:\n        name: notes-db-dev-data\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"services"})," block holds the definitions for each of the services or containers in the application"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"db"})," and ",(0,s.jsx)(n.code,{children:"api"})," are the two services that comprise this project."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Every ",(0,s.jsx)(n.strong,{children:"service"})," requires either a pre-built image or a ",(0,s.jsx)(n.code,{children:"Dockerfile"})," to run a container"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"volumes"})," block defines any name volume needed by any of the services."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Let's have a closer look at the individual services."}),"\n",(0,s.jsxs)(n.p,{children:["The definition code for the ",(0,s.jsx)(n.code,{children:"db"})," service is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"db:\n    image: postgres:12\n    container_name: notes-db-dev\n    volumes:\n        - db-data:/var/lib/postgresql/data\n    environment:\n        POSTGRES_DB: notesdb\n        POSTGRES_PASSWORD: secret\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"image"})," key holds the image repository and tag used for this container."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"We're using the postgres:12 image for running the database container."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"container_name"})," indicates the name of the container. By default containers are named following ",(0,s.jsx)(n.code,{children:"<project directory name>_<service name>"})," syntax."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["You can override that using ",(0,s.jsx)(n.code,{children:"container_name"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"volumes"})," array holds the volume mappings for the service and supports named volumes, anonymous volumes, and bind mounts."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The syntax is ",(0,s.jsx)(n.code,{children:"<source>:<destination>"})," like you have seen before."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"environment"})," map holds the values of the various environment variables needed for the service."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Definition code for the ",(0,s.jsx)(n.code,{children:"api"})," service is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"api:\n    build:\n        context: ./api\n        dockerfile: Dockerfile.dev\n    image: notes-api:dev\n    container_name: notes-api-dev\n    environment:\n        DB_HOST: db ## same as the database service name\n        DB_DATABASE: notesdb\n        DB_PASSWORD: secret\n    volumes:\n        - /home/node/app/node_modules\n        - ./api:/home/node/app\n    ports:\n        - 3000:3000\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"api"})," service doesn't come with a pre-built image. Instead it has a ",(0,s.jsx)(n.code,{children:"build"})," configuration. Under the build block we define the context and the name of the ",(0,s.jsx)(n.code,{children:"Dockerfile"})," for building an image."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"image"})," key holds the name of the image to be built. If not assigned, the image will be named following the ",(0,s.jsx)(n.code,{children:"<project directory name>_<service name>"})," syntax."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Inside the ",(0,s.jsx)(n.code,{children:"environment"})," map, we can refer to another service in the same application by using its name."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["So the ",(0,s.jsx)(n.code,{children:"db"})," here, will be replaced by the IP address of the api service container."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.strong,{children:"DB_DATABASE"})," and ",(0,s.jsx)(n.strong,{children:"DB_PASSWORD"})," variables have to match up with ",(0,s.jsx)(n.strong,{children:"POSTGRES_DB"})," and ",(0,s.jsx)(n.strong,{children:"POSTGRES_PASSWORD"})," respectively from the db service definition."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"volumes"})," map, you can see an anonymous volume and a bind mount described."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"ports"})," map defines any port mapping. The syntax, ",(0,s.jsx)(n.code,{children:"<host port>:<container port>"})," is identical to the ",(0,s.jsx)(n.code,{children:"--publish"})," option you used before."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Finally, the code for the ",(0,s.jsx)(n.code,{children:"volumes"})," is as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"volumes:\n    db-data:\n        name: notes-db-dev-data\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Any named volume used in any of the services has to be defined here. If you don't define a name, the volume will be named following the ",(0,s.jsx)(n.code,{children:"<project directory name>_<volume key>"})," and the key here is ",(0,s.jsx)(n.code,{children:"db-data"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"start-services",children:"Start services"}),"\n",(0,s.jsxs)(n.p,{children:["You must your terminal in the same directory where the ",(0,s.jsx)(n.code,{children:"docker-compose.yaml"})," file is."]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"up"})," command builds any missing images, creates containers, and starts them in one go."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker-compose --file docker-compose.yaml up --detach\n\n# Creating network "notes-api_default" with the default driver\n# Creating volume "notes-db-dev-data" with default driver\n# Building api\n# Sending build context to Docker daemon  37.38kB\n#\n# Step 1/13 : FROM node:lts-alpine as builder\n#  ---\x3e 471e8b4eb0b2\n# Step 2/13 : RUN apk add --no-cache python make g++\n#  ---\x3e Running in 197056ec1964\n### LONG INSTALLATION STUFF GOES HERE ###\n# Removing intermediate container 197056ec1964\n#  ---\x3e 6609935fe50b\n# Step 3/13 : WORKDIR /app\n#  ---\x3e Running in 17010f65c5e7\n# Removing intermediate container 17010f65c5e7\n#  ---\x3e b10d12e676ad\n# Step 4/13 : COPY ./package.json .\n#  ---\x3e 600d31d9362e\n# Step 5/13 : RUN npm install\n#  ---\x3e Running in a14afc8c0743\n### LONG INSTALLATION STUFF GOES HERE ###\n#  Removing intermediate container a14afc8c0743\n#  ---\x3e 952d5d86e361\n# Step 6/13 : FROM node:lts-alpine\n#  ---\x3e 471e8b4eb0b2\n# Step 7/13 : ENV NODE_ENV=development\n#  ---\x3e Running in 0d5376a9e78a\n# Removing intermediate container 0d5376a9e78a\n#  ---\x3e 910c081ce5f5\n# Step 8/13 : USER node\n#  ---\x3e Running in cfaefceb1eff\n# Removing intermediate container cfaefceb1eff\n#  ---\x3e 1480176a1058\n# Step 9/13 : RUN mkdir -p /home/node/app\n#  ---\x3e Running in 3ae30e6fb8b8\n# Removing intermediate container 3ae30e6fb8b8\n#  ---\x3e c391cee4b92c\n# Step 10/13 : WORKDIR /home/node/app\n#  ---\x3e Running in 6aa27f6b50c1\n# Removing intermediate container 6aa27f6b50c1\n#  ---\x3e 761a7435dbca\n# Step 11/13 : COPY . .\n#  ---\x3e b5d5c5bdf3a6\n# Step 12/13 : COPY --from=builder /app/node_modules /home/node/app/node_modules\n#  ---\x3e 9e1a19960420\n# Step 13/13 : CMD [ "./node_modules/.bin/nodemon", "--config", "nodemon.json", "bin/www" ]\n#  ---\x3e Running in 5bdd62236994\n# Removing intermediate container 5bdd62236994\n#  ---\x3e 548e178f1386\n# Successfully built 548e178f1386\n# Successfully tagged notes-api:dev\n# Creating notes-api-dev ... done\n# Creating notes-db-dev  ... done\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--detach"})," or ",(0,s.jsx)(n.code,{children:"-d"})," option here to keep it running in background."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--file"})," or ",(0,s.jsx)(n.code,{children:"-f"})," option is only needed if the YAML file is not named ",(0,s.jsx)(n.code,{children:"docker-compose.yaml"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--build"})," option for the up command forces a rebuild of the images."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Apart from the the ",(0,s.jsx)(n.code,{children:"up"})," command there is the ",(0,s.jsx)(n.code,{children:"start"})," command. The main difference between these two is that the ",(0,s.jsx)(n.code,{children:"start"})," command doesn't create missing containers, only starts existing containers. It's basically the same as the ",(0,s.jsx)(n.code,{children:"container start"})," command."]}),"\n",(0,s.jsx)(n.h2,{id:"list-services",children:"List services"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ps"})," command for listing containers defined in the YAML only."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose ps\n\n#     Name                   Command               State           Ports\n# -------------------------------------------------------------------------------\n# notes-api-dev   docker-entrypoint.sh ./nod ...   Up      0.0.0.0:3000->3000/tcp\n# notes-db-dev    docker-entrypoint.sh postgres    Up      5432/tcp\n"})}),"\n",(0,s.jsx)(n.h2,{id:"execute-commands-inside-a-running-service",children:"Execute commands inside a running service"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"exec"})," command to exec commands inside a running service."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose exec <service name> <command>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To execute the ",(0,s.jsx)(n.code,{children:"npm run db:migrate"})," command inside the ",(0,s.jsx)(n.code,{children:"api"})," service, we can execute the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose exec api npm run db:migrate\n\n# > notes-api@ db:migrate /home/node/app\n# > knex migrate:latest\n#\n# Using environment: development\n# Batch 1 run: 1 migrations\n"})}),"\n",(0,s.jsxs)(n.p,{children:["We don't need to pass the ",(0,s.jsx)(n.code,{children:"-it"})," flag for interactive sessions. docker-compose does that automatically."]}),"\n",(0,s.jsx)(n.h2,{id:"access-logs-from-a-running-service",children:"Access logs from a running service"}),"\n",(0,s.jsxs)(n.p,{children:["Use the ",(0,s.jsx)(n.code,{children:"logs"})," command to retrieve logs from a running service."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose logs <service name>\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To access the logs from the ",(0,s.jsx)(n.code,{children:"api"})," service, execute the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose logs api\n\n# Attaching to notes-api-dev\n# notes-api-dev | [nodemon] 2.0.7\n# notes-api-dev | [nodemon] reading config ./nodemon.json\n# notes-api-dev | [nodemon] to restart at any time, enter `rs`\n# notes-api-dev | [nodemon] or send SIGHUP to 1 to restart\n# notes-api-dev | [nodemon] ignoring: *.test.js\n# notes-api-dev | [nodemon] watching path(s): *.*\n# notes-api-dev | [nodemon] watching extensions: js,mjs,json\n# notes-api-dev | [nodemon] starting `node bin/www`\n# notes-api-dev | [nodemon] forking\n# notes-api-dev | [nodemon] child pid: 19\n# notes-api-dev | [nodemon] watching 18 files\n# notes-api-dev | app running -> http://127.0.0.1:3000\n"})}),"\n",(0,s.jsxs)(n.p,{children:["You can kind of hook into the output stream of the service and get the logs in real-time by using the ",(0,s.jsx)(n.code,{children:"-f"})," or ",(0,s.jsx)(n.code,{children:"--follow"})," option"]}),"\n",(0,s.jsx)(n.h2,{id:"stop-services",children:"Stop services"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"down"})," command stops all running containers and removes them from the system."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"docker-compose down --volumes\n\n# Stopping notes-api-dev ... done\n# Stopping notes-db-dev  ... done\n# Removing notes-api-dev ... done\n# Removing notes-db-dev  ... done\n# Removing network notes-api_default\n# Removing volume notes-db-dev-data\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"--volumes"})," option indicates that you want to remove any named volume(s) defined in the ",(0,s.jsx)(n.code,{children:"volumes"})," block."]}),"\n",(0,s.jsx)(n.h2,{id:"compose-a-full-stack-application",children:"Compose a full-stack application"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.freecodecamp.org/news/content/images/2021/01/fullstack-application-design.svg",children:"Full-stack diagram"})}),"\n",(0,s.jsxs)(n.p,{children:["Let's start writing the ",(0,s.jsx)(n.code,{children:"docker-compose.yaml"})," file. Apart from the ",(0,s.jsx)(n.code,{children:"api"})," and ",(0,s.jsx)(n.code,{children:"db"})," services there will be the ",(0,s.jsx)(n.code,{children:"client"})," and ",(0,s.jsx)(n.code,{children:"nginx"})," services"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",metastring:'title="docker-compose.yaml"',children:'version: "3.8"\n\nservices:\n    db:\n        image: postgres:12\n        container_name: notes-db-dev\n        volumes:\n            - db-data:/var/lib/postgresql/data\n        environment:\n            POSTGRES_DB: notesdb\n            POSTGRES_PASSWORD: secret\n        networks:\n            - backend\n    api:\n        build:\n            context: ./api\n            dockerfile: Dockerfile.dev\n        image: notes-api:dev\n        container_name: notes-api-dev\n        volumes:\n            - /home/node/app/node_modules\n            - ./api:/home/node/app\n        environment:\n            DB_HOST: db ## same as the database service name\n            DB_PORT: 5432\n            DB_USER: postgres\n            DB_DATABASE: notesdb\n            DB_PASSWORD: secret\n        networks:\n            - backend\n    client:\n        build:\n            context: ./client\n            dockerfile: Dockerfile.dev\n        image: notes-client:dev\n        container_name: notes-client-dev\n        volumes:\n            - /home/node/app/node_modules\n            - ./client:/home/node/app\n        networks:\n            - frontend\n    nginx:\n        build:\n            context: ./nginx\n            dockerfile: Dockerfile.dev\n        image: notes-router:dev\n        container_name: notes-router-dev\n        restart: unless-stopped\n        ports:\n            - 8080:80\n        networks:\n            - backend\n            - frontend\n\nvolumes:\n    db-data:\n        name: notes-db-dev-data\n\nnetworks:\n    frontend:\n        name: fullstack-notes-application-network-frontend\n        driver: bridge\n    backend:\n        name: fullstack-notes-application-network-backend\n        driver: bridge\n'})}),"\n",(0,s.jsxs)(n.p,{children:["Let's take a look at ",(0,s.jsx)(n.code,{children:"networks"})," block:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"networks:\n    frontend:\n        name: fullstack-notes-application-network-frontend\n        driver: bridge\n    backend:\n        name: fullstack-notes-application-network-backend\n        driver: bridge\n"})}),"\n",(0,s.jsx)(n.p,{children:"By default, Compose creates a bridge network and attaches all containers to that. In this project, however, I wanted proper network isolation. So I defined two networks, one for the front-end services and one for the back-end services."}),"\n",(0,s.jsx)(n.p,{children:"I've also added networks block in each of the service definitions. This way the the api and db service will be attached to one network and the client service will be attached to a separate network. But the nginx service will be attached to both the networks so that it can perform as router between the front-end and back-end services."}),"\n",(0,s.jsxs)(n.p,{children:["Start all the ",(0,s.jsx)(n.code,{children:"services"})," by executing the following command:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'docker-compose --file docker-compose.yaml up --detach\n\n# Creating network "fullstack-notes-application-network-backend" with driver "bridge"\n# Creating network "fullstack-notes-application-network-frontend" with driver "bridge"\n# Creating volume "notes-db-dev-data" with default driver\n# Building api\n# Sending build context to Docker daemon  37.38kB\n#\n# Step 1/13 : FROM node:lts-alpine as builder\n#  ---\x3e 471e8b4eb0b2\n# Step 2/13 : RUN apk add --no-cache python make g++\n#  ---\x3e Running in 8a4485388fd3\n### LONG INSTALLATION STUFF GOES HERE ###\n# Removing intermediate container 8a4485388fd3\n#  ---\x3e 47fb1ab07cc0\n# Step 3/13 : WORKDIR /app\n#  ---\x3e Running in bc76cc41f1da\n# Removing intermediate container bc76cc41f1da\n#  ---\x3e 8c03fdb920f9\n# Step 4/13 : COPY ./package.json .\n#  ---\x3e a1d5715db999\n# Step 5/13 : RUN npm install\n#  ---\x3e Running in fabd33cc0986\n### LONG INSTALLATION STUFF GOES HERE ###\n# Removing intermediate container fabd33cc0986\n#  ---\x3e e09913debbd1\n# Step 6/13 : FROM node:lts-alpine\n#  ---\x3e 471e8b4eb0b2\n# Step 7/13 : ENV NODE_ENV=development\n#  ---\x3e Using cache\n#  ---\x3e b7c12361b3e5\n# Step 8/13 : USER node\n#  ---\x3e Using cache\n#  ---\x3e f5ac66ca07a4\n# Step 9/13 : RUN mkdir -p /home/node/app\n#  ---\x3e Using cache\n#  ---\x3e 60094b9a6183\n# Step 10/13 : WORKDIR /home/node/app\n#  ---\x3e Using cache\n#  ---\x3e 316a252e6e3e\n# Step 11/13 : COPY . .\n#  ---\x3e Using cache\n#  ---\x3e 3a083622b753\n# Step 12/13 : COPY --from=builder /app/node_modules /home/node/app/node_modules\n#  ---\x3e Using cache\n#  ---\x3e 707979b3371c\n# Step 13/13 : CMD [ "./node_modules/.bin/nodemon", "--config", "nodemon.json", "bin/www" ]\n#  ---\x3e Using cache\n#  ---\x3e f2da08a5f59b\n# Successfully built f2da08a5f59b\n# Successfully tagged notes-api:dev\n# Building client\n# Sending build context to Docker daemon  43.01kB\n#\n# Step 1/7 : FROM node:lts-alpine\n#  ---\x3e 471e8b4eb0b2\n# Step 2/7 : USER node\n#  ---\x3e Using cache\n#  ---\x3e 4be5fb31f862\n# Step 3/7 : RUN mkdir -p /home/node/app\n#  ---\x3e Using cache\n#  ---\x3e 1fefc7412723\n# Step 4/7 : WORKDIR /home/node/app\n#  ---\x3e Using cache\n#  ---\x3e d1470d878aa7\n# Step 5/7 : COPY ./package.json .\n#  ---\x3e Using cache\n#  ---\x3e bbcc49475077\n# Step 6/7 : RUN npm install\n#  ---\x3e Using cache\n#  ---\x3e 860a4a2af447\n# Step 7/7 : CMD [ "npm", "run", "serve" ]\n#  ---\x3e Using cache\n#  ---\x3e 11db51d5bee7\n# Successfully built 11db51d5bee7\n# Successfully tagged notes-client:dev\n# Building nginx\n# Sending build context to Docker daemon   5.12kB\n#\n# Step 1/2 : FROM nginx:stable-alpine\n#  ---\x3e f2343e2e2507\n# Step 2/2 : COPY ./development.conf /etc/nginx/conf.d/default.conf\n#  ---\x3e Using cache\n#  ---\x3e 02a55d005a98\n# Successfully built 02a55d005a98\n# Successfully tagged notes-router:dev\n# Creating notes-client-dev ... done\n# Creating notes-api-dev    ... done\n# Creating notes-router-dev ... done\n# Creating notes-db-dev     ... done\n'})}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.freecodecamp.org/news/the-docker-handbook",children:"Docker Handbook"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://techmormo.com/posts/what-is-docker-compose/",children:"What is Docker Compose - Techmormo"})})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>a,a:()=>t});var s=o(7294);const i={},d=s.createContext(i);function t(e){const n=s.useContext(d);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(d.Provider,{value:n},e.children)}}}]);