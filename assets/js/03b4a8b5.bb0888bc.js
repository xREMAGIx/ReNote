"use strict";(self.webpackChunkrenote=self.webpackChunkrenote||[]).push([[8078],{1860:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var t=a(5893),o=a(1151);const s={sidebar_position:6},r="Containerize Multi-container JavaScript application",i={id:"docker/containerize-multi-js-app",title:"Containerize Multi-container JavaScript application",description:"Run the Database Server",source:"@site/docs/docker/containerize-multi-js-app.md",sourceDirName:"docker",slug:"/docker/containerize-multi-js-app",permalink:"/renote/docs/docker/containerize-multi-js-app",draft:!1,unlisted:!1,editUrl:"https://github.com/xREMAGIx/renote/tree/main/docs/docker/containerize-multi-js-app.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Network Manipulation",permalink:"/renote/docs/docker/network-manipulcation"},next:{title:"Docker Compose",permalink:"/renote/docs/docker/docker-compose"}},c={},d=[{value:"Run the Database Server",id:"run-the-database-server",level:2},{value:"Work with named volume",id:"work-with-named-volume",level:2},{value:"Access logs from a Container",id:"access-logs-from-a-container",level:2},{value:"Create a Network and Attaching the Database Server",id:"create-a-network-and-attaching-the-database-server",level:2},{value:"Write the Dockerfile",id:"write-the-dockerfile",level:2},{value:"Execute commands in a running Container",id:"execute-commands-in-a-running-container",level:2},{value:"References",id:"references",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"containerize-multi-container-javascript-application",children:"Containerize Multi-container JavaScript application"}),"\n",(0,t.jsx)(n.h2,{id:"run-the-database-server",children:"Run the Database Server"}),"\n",(0,t.jsx)(n.p,{children:"We will use postgres official image since we only need simple image to demonstrate."}),"\n",(0,t.jsx)(n.p,{children:"To run this database server image, execute this command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'docker container run \\\n    --detach \\\n    --name=notes-db \\\n    --env POSTGRES_DB=notesdb \\\n    --env POSTGRES_PASSWORD=secret \\\n    --network=notes-api-network \\\n    postgres:12\n\n# a7b287d34d96c8e81a63949c57b83d7c1d71b5660c87f5172f074bd1606196dc\n\ndocker container ls\n\n# CONTAINER ID   IMAGE         COMMAND                  CREATED              STATUS              PORTS      NAMES\n# a7b287d34d96   postgres:12   "docker-entrypoint.s\u2026"   About a minute ago   Up About\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"--env"})," option for the ",(0,t.jsx)(n.code,{children:"container run"})," and ",(0,t.jsx)(n.code,{children:"container create"})," commands can be used for providing environment variables to a container."]}),"\n",(0,t.jsxs)(n.p,{children:["But databases like PostgreSQL, MongoDB, and MySQL persist their data in a directory. ",(0,t.jsx)(n.strong,{children:"If container is destroy, we'll lose all our data."})]}),"\n",(0,t.jsx)(n.p,{children:"To solve this problem, a named volume can be used."}),"\n",(0,t.jsx)(n.h2,{id:"work-with-named-volume",children:"Work with named volume"}),"\n",(0,t.jsx)(n.p,{children:"The volume create command can be used for creating a named volume."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker volume create <volume name>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To create a volume named ",(0,t.jsx)(n.code,{children:"notes-db-data"}),", we can execute the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker volume create notes-db-data\n\n# notes-db-data\n\ndocker volume ls\n\n# DRIVER    VOLUME NAME\n# local     notes-db-data\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To stop and remove the ",(0,t.jsx)(n.code,{children:"notes-db"})," container:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container stop notes-db\n\n# notes-db\n\ndocker container rm notes-db\n\n# notes-db\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now run a new container and assign the volume using the ",(0,t.jsx)(n.code,{children:"--volume"})," or ",(0,t.jsx)(n.code,{children:"-v"})," option."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container run \\\n    --detach \\\n    --volume notes-db-data:/var/lib/postgresql/data \\\n    --name=notes-db \\\n    --env POSTGRES_DB=notesdb \\\n    --env POSTGRES_PASSWORD=secret \\\n    --network=notes-api-network \\\n    postgres:12\n\n# 37755e86d62794ed3e67c19d0cd1eba431e26ab56099b92a3456908c1d346791\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now we can inspect the ",(0,t.jsx)(n.code,{children:"notes-db"})," container to make sure that the mounting was successful:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container inspect --format='{{range .Mounts}} {{ .Name }} {{end}}' notes-db\n\n#  notes-db-data\n"})}),"\n",(0,t.jsx)(n.h2,{id:"access-logs-from-a-container",children:"Access logs from a Container"}),"\n",(0,t.jsxs)(n.p,{children:["In order to see the logs from a container, we can use the ",(0,t.jsx)(n.code,{children:"container logs"})," command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container logs <container identifier>\n"})}),"\n",(0,t.jsx)(n.p,{children:"To access the logs from the notes-db container, you can execute the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'docker container logs notes-db\n# The files belonging to this database system will be owned by user "postgres".\n# This user must also own the server process.\n\n# The database cluster will be initialized with locale "en_US.utf8".\n# The default database encoding has accordingly been set to "UTF8".\n# The default text search configuration will be set to "english".\n#\n# Data page checksums are disabled.\n#\n# fixing permissions on existing directory /var/lib/postgresql/data ... ok\n# creating subdirectories ... ok\n# selecting dynamic shared memory implementation ... posix\n# selecting default max_connections ... 100\n# selecting default shared_buffers ... 128MB\n# selecting default time zone ... Etc/UTC\n# creating configuration files ... ok\n# running bootstrap script ... ok\n# performing post-bootstrap initialization ... ok\n# syncing data to disk ... ok\n#\n#\n# Success. You can now start the database server using:\n#\n#     pg_ctl -D /var/lib/postgresql/data -l logfile start\n#\n# initdb: warning: enabling "trust" authentication for local connections\n# You can change this by editing pg_hba.conf or using the option -A, or\n# --auth-local and --auth-host, the next time you run initdb.\n# waiting for server to start....2021-01-25 13:39:21.613 UTC [47] LOG:  starting PostgreSQL 12.5 (Debian 12.5-1.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit\n# 2021-01-25 13:39:21.621 UTC [47] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"\n# 2021-01-25 13:39:21.675 UTC [48] LOG:  database system was shut down at 2021-01-25 13:39:21 UTC\n# 2021-01-25 13:39:21.685 UTC [47] LOG:  database system is ready to accept connections\n#  done\n# server started\n# CREATE DATABASE\n#\n#\n# /usr/local/bin/docker-entrypoint.sh: ignoring /docker-entrypoint-initdb.d/*\n#\n# 2021-01-25 13:39:22.008 UTC [47] LOG:  received fast shutdown request\n# waiting for server to shut down....2021-01-25 13:39:22.015 UTC [47] LOG:  aborting any active transactions\n# 2021-01-25 13:39:22.017 UTC [47] LOG:  background worker "logical replication launcher" (PID 54) exited with exit code 1\n# 2021-01-25 13:39:22.017 UTC [49] LOG:  shutting down\n# 2021-01-25 13:39:22.056 UTC [47] LOG:  database system is shut down\n#  done\n# server stopped\n#\n# PostgreSQL init process complete; ready for start up.\n#\n# 2021-01-25 13:39:22.135 UTC [1] LOG:  starting PostgreSQL 12.5 (Debian 12.5-1.pgdg100+1) on x86_64-pc-linux-gnu, compiled by gcc (Debian 8.3.0-6) 8.3.0, 64-bit\n# 2021-01-25 13:39:22.136 UTC [1] LOG:  listening on IPv4 address "0.0.0.0", port 5432\n# 2021-01-25 13:39:22.136 UTC [1] LOG:  listening on IPv6 address "::", port 5432\n# 2021-01-25 13:39:22.147 UTC [1] LOG:  listening on Unix socket "/var/run/postgresql/.s.PGSQL.5432"\n# 2021-01-25 13:39:22.177 UTC [75] LOG:  database system was shut down at 2021-01-25 13:39:22 UTC\n# 2021-01-25 13:39:22.190 UTC [1] LOG:  database system is ready to accept connections\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"--follow"})," or ",(0,t.jsx)(n.code,{children:"-f"})," option for the command which lets you attach the console to the logs output and get a continuous stream of text."]}),"\n",(0,t.jsx)(n.h2,{id:"create-a-network-and-attaching-the-database-server",children:"Create a Network and Attaching the Database Server"}),"\n",(0,t.jsxs)(n.p,{children:["First, create a network named ",(0,t.jsx)(n.code,{children:"notes-api-network"})," in our system:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network create notes-api-network\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now attach the ",(0,t.jsx)(n.code,{children:"notes-db"})," container to this network by executing the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network connect notes-api-network notes-db\n"})}),"\n",(0,t.jsx)(n.h2,{id:"write-the-dockerfile",children:"Write the Dockerfile"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'# stage one\nFROM node:lts-alpine as builder\n\n# install dependencies for node-gyp\nRUN apk add --no-cache python make g++\n\nWORKDIR /app\n\nCOPY ./package.json .\nRUN npm install --only=prod\n\n# stage two\nFROM node:lts-alpine\n\nEXPOSE 3000\nENV NODE_ENV=production\n\nUSER node\nRUN mkdir -p /home/node/app\nWORKDIR /home/node/app\n\nCOPY . .\nCOPY --from=builder /app/node_modules  /home/node/app/node_modules\n\nCMD [ "node", "bin/www" ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"This is a multi-staged build."}),"\n",(0,t.jsx)(n.p,{children:"The first stage is used for building and installing the dependencies using node-gyp and the second stage is for running the application."}),"\n",(0,t.jsx)(n.p,{children:"To build an image from this Dockerfile, we can execute the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker image build --tag notes-api .\n\n# Sending build context to Docker daemon  37.38kB\n\n### LONG INSTALLATION STUFF GOES HERE ###\n\n# Successfully built 9ea100571585\n# Successfully tagged notes-api:latest\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To make sure the database container is running, and is attached to the ",(0,t.jsx)(n.code,{children:"notes-api-network"}),", run:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'docker container inspect notes-db\n\n# [\n#     {\n#         ...\n#         "State": {\n#             "Status": "running",\n#             "Running": true,\n#             "Paused": false,\n#             "Restarting": false,\n#             "OOMKilled": false,\n#             "Dead": false,\n#             "Pid": 11521,\n#             "ExitCode": 0,\n#             "Error": "",\n#             "StartedAt": "2021-01-26T06:55:44.928510218Z",\n#             "FinishedAt": "2021-01-25T14:19:31.316854657Z"\n#         },\n#         ...\n#         "Mounts": [\n#             {\n#                 "Type": "volume",\n#                 "Name": "notes-db-data",\n#                 "Source": "/var/lib/docker/volumes/notes-db-data/_data",\n#                 "Destination": "/var/lib/postgresql/data",\n#                 "Driver": "local",\n#                 "Mode": "z",\n#                 "RW": true,\n#                 "Propagation": ""\n#             }\n#         ],\n#         ...\n#         "NetworkSettings": {\n#             ...\n#             "Networks": {\n#                 "bridge": {\n#                     "IPAMConfig": null,\n#                     "Links": null,\n#                     "Aliases": null,\n#                     "NetworkID": "e4c7ce50a5a2a49672155ff498597db336ecc2e3bbb6ee8baeebcf9fcfa0e1ab",\n#                     "EndpointID": "2a2587f8285fa020878dd38bdc630cdfca0d769f76fc143d1b554237ce907371",\n#                     "Gateway": "172.17.0.1",\n#                     "IPAddress": "172.17.0.2",\n#                     "IPPrefixLen": 16,\n#                     "IPv6Gateway": "",\n#                     "GlobalIPv6Address": "",\n#                     "GlobalIPv6PrefixLen": 0,\n#                     "MacAddress": "02:42:ac:11:00:02",\n#                     "DriverOpts": null\n#                 },\n#                 "notes-api-network": {\n#                     "IPAMConfig": {},\n#                     "Links": null,\n#                     "Aliases": [\n#                         "37755e86d627"\n#                     ],\n#                     "NetworkID": "06579ad9f93d59fc3866ac628ed258dfac2ed7bc1a9cd6fe6e67220b15d203ea",\n#                     "EndpointID": "5b8f8718ec9a5ec53e7a13cce3cb540fdf3556fb34242362a8da4cc08d37223c",\n#                     "Gateway": "172.18.0.1",\n#                     "IPAddress": "172.18.0.2",\n#                     "IPPrefixLen": 16,\n#                     "IPv6Gateway": "",\n#                     "GlobalIPv6Address": "",\n#                     "GlobalIPv6PrefixLen": 0,\n#                     "MacAddress": "02:42:ac:12:00:02",\n#                     "DriverOpts": {}\n#                 }\n#             }\n#         }\n#     }\n# ]\n'})}),"\n",(0,t.jsx)(n.p,{children:"We can run a new container by executing the following command:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container run \\\n    --detach \\\n    --name=notes-api \\\n    --env DB_HOST=notes-db \\\n    --env DB_DATABASE=notesdb \\\n    --env DB_PASSWORD=secret \\\n    --publish=3000:3000 \\\n    --network=notes-api-network \\\n    notes-api\n\n# f9ece420872de99a060b954e3c236cbb1e23d468feffa7fed1e06985d99fb919\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To check if the container is running properly or not, you can use the ",(0,t.jsx)(n.code,{children:"container ls"})," command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'docker container ls\n\n# CONTAINER ID   IMAGE         COMMAND                  CREATED          STATUS          PORTS                    NAMES\n# f9ece420872d   notes-api     "docker-entrypoint.s\u2026"   12 minutes ago   Up 12 minutes   0.0.0.0:3000->3000/tcp   notes-api\n# 37755e86d627   postgres:12   "docker-entrypoint.s\u2026"   17 hours ago     Up 14 minutes   5432/tcp                 notes-db\n'})}),"\n",(0,t.jsx)(n.h2,{id:"execute-commands-in-a-running-container",children:"Execute commands in a running Container"}),"\n",(0,t.jsx)(n.p,{children:"We'll have to run the database migration necessary for setting up the database tables before using this container."}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"exec"})," command to execute a custom command inside a running container."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container exec <container identifier> <command>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To execute npm run db",":migrate"," inside the notes-api container, you can execute the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container exec notes-api npm run db:migrate\n\n# > notes-api@ db:migrate /home/node/app\n# > knex migrate:latest\n#\n# Using environment: production\n# Batch 1 run: 1 migrations\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When we want to run an interactive command inside a running container, we'll have to use the ",(0,t.jsx)(n.code,{children:"-it"})," flag"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker container exec -it notes-api sh\n\n# / # uname -a\n# Linux b5b1367d6b31 5.10.9-201.fc33.x86_64 #1 SMP Wed Jan 20 16:56:23 UTC 2021 x86_64 Linux\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://www.freecodecamp.org/news/the-docker-handbook",children:"Docker Handbook"})})]})}function h(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,a)=>{a.d(n,{Z:()=>i,a:()=>r});var t=a(7294);const o={},s=t.createContext(o);function r(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);